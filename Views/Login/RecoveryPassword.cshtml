@{
    ViewData["Title"] = "Login";
}

<div id="loginRecovery" class="d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 56px);">
    <div class="loginRecovery-container col-md-6 p-4 shadow-sm rounded">
        <div class="col-12 text-center mb-4">
            <h1>Recuperar senha.</h1>
        </div>
        <form v-show="!showFormRecovery">
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Login</label>
                <input type="email" v-model="loginRecoveryForm.login" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                <div class="alert alert-danger mt-2" v-show="messages.alertLoginInvalidade" role="alert">
                    O campo de login está inválido.
                </div>
            </div>
            <div class="text-center">
                <button type="button" class="btn btn-success btn-lg text-white" v-on:Click="recoveryLogin">Enviar solicitação</button>
            </div>
        </form>
        <form v-show="showFormRecovery">
            <div class="mb-3">
                <label class="form-label">Nova senha</label>
                <input type="password" v-model="loginRecoveryForm.password" class="form-control" id="exampleInputpassword" aria-describedby="passwordHelp">
                <div class="alert alert-danger mt-2" v-show="messages.alertPasswordInvalidade" role="alert">
                    A senha está invalida.
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label">Repita a senha</label>
                <input type="password" v-model="loginRecoveryForm.repeatPassword" class="form-control" id="exampleInputRepeatPassword" aria-describedby="passwordHelp">
                <div class="alert alert-danger mt-2" v-show="messages.alertRepeatpasswordInvalidade" role="alert">
                    A senha não está igual!
                </div>
            </div>
            <div class="text-center">
                <button type="button" class="btn btn-success btn-lg text-white" v-on:Click="resetPassword">Redefinir senha</button>
            </div>
        </form>
    </div>
</div>

<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var loginRecovery = new Vue({
        el: '#loginRecovery',
        data() {
            return {
                loginRecoveryForm: {
                    login: "",
                    password:"",
                    repeatPassword:"",
                },
                messages: {
                    alertLoginInvalidade: false,
                    alertPasswordInvalidade: false,
                },
                queryString:{
                    token :''
                },
                showFormRecovery: false,
            };
        },
        methods: {
            recoveryLogin() {
                this.resetProptsForms();

                if (this.validateForm())
                    return;

                const login = this.loginRecoveryForm.login;

                axios.post('/Login/CallRecoveryPassword', login  , {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (response.data)
                        Swal.fire({
                            title: 'Email enviado!',
                            text: 'O seu email de confirmação foi enviado com sucesso!',
                            icon: 'success',
                            confirmButtonText: 'Ok',
                            footer: 'Verifique seu e-mail para atualizar a senha.'
                        });
                    else
                        Swal.fire({
                            title: 'Login Invalido!',
                            text: 'O seu login está incorreto!',
                            icon: 'error',
                            confirmButtonText: 'Ok',
                            footer: 'Verifique os dados preenchidos'
                        });
                })
                .catch(error => {
                    console.error('Erro ao cadastrar:', error);
                })
                .finally(function () {
                });
            },
            validateForm() {
                let formInValidate = false;
                if (this.loginRecoveryForm.login === "") {
                    this.messages.alertLoginInvalidade = true;
                    formInValidate = true;
                }
                return formInValidate;
            },
            resetProptsForms() {
                this.messages.alertLoginInvalidade = false;
            },
            getQueryString(){
            let urlParams = new URLSearchParams(window.location.search);

            if(urlParams.has('token')){
                 this.queryString.token = urlParams.get('token');
                  this.validateToken(this.queryString.token);
            }
         },
            validateToken(token){

                    axios.post('/Login/ValidateToken', token,{
                   headers: {
                   'Content-Type': 'application/json'
                 }})
                 .then(response => {
                     if(response.data)
                        this.showFormRecovery = true;
                     else {
                         if(this.queryString.token != ""){
                                 Swal.fire({
                                title: 'Token Invalido!',
                                text: 'Esse token já foi utilizado!',
                                icon: 'error',
                                confirmButtonText: 'Ok',
                                footer: 'Peça uma nova solicitação de senha.'
                            });
                         }

                        this.queryString.token = ''


                     }
                 })
                 .catch(error => {
                   console.error('Erro ao  cadastrar:', error);
                 });
             },
            resetPassword()
            {
                if(this.validateRepeatPassword())
                { 

                    var resetPassword =  {
                        password: this.loginRecoveryForm.password,
                        token: this.queryString.token

                    }

                   axios.post('/Login/ResetPassword', resetPassword ,{
                   headers: {
                   'Content-Type': 'application/json'
                 }})
                 .then(response => {
                      Swal.fire({
                            title: 'Senha alterada com sucesso!',
                            text: 'Sua senha foi alterada com sucesso!',
                            icon: 'success',
                            confirmButtonText: 'Ok',
                            footer: 'Tente logar usando a nova senha.'
                        });
                 })
                 .catch(error => {
                   console.error('Erro ao Redefinir senha! ', error);
                 }).finally(function () {
                        setTimeout(() => {
                             window.location.href = "/Login/Login";
                }, 3000); 

                });
                 }
                 
            },
            validateRepeatPassword(){
                if(this.loginRecoveryForm.password == this.loginRecoveryForm.repeatPassword && this.loginRecoveryForm.password != "" && this.loginRecoveryForm.repeatPassword != "")
                    return true;
                else {
                    this.messages.alertPasswordInvalidade = true
                    this.messages.alertRepeatpasswordInvalidade = true;
                    return false;
                }
            }

        },
        mounted(){
            this.getQueryString();
        },
    })
</script>