@{
    ViewData["Title"] = "Login";
}

<style>
    /* ====== Fundo cinematográfico com scrim e leve blur (não afeta o conteúdo) ====== */
    .auth-bg{
        position: fixed; inset: 0;
        background: url('@Url.Content("~/Images/PhotoLogin.png")') center/cover no-repeat;
        z-index: 0; pointer-events: none;
    }
    .auth-bg::before{
        content:"";
        position: absolute; inset: 0;
        /* dois layers: vinheta radial + degradê vertical para legibilidade */
        background:
            radial-gradient(90% 65% at 50% 30%, rgba(0,0,0,.25) 0%, rgba(0,0,0,.65) 70%),
            linear-gradient(180deg, rgba(0,0,0,.25) 0%, rgba(0,0,0,.68) 100%);
        backdrop-filter: blur(2px);
        -webkit-backdrop-filter: blur(2px);
    }

    /* ====== Root ====== */
    #login{
        min-height: 100dvh;
        display: grid;
        place-items: center;
        padding: clamp(16px, 3vw, 32px);
        color: var(--text-100);
        position: relative; z-index: 1;

        /* Force all text tokens to white nesta página */
        --text-100: #fff;
        --text-300: #fff;
        --text-500: #fff;
        --fg-strong: #fff;

        /* tokens usados pelos inputs */
        --bg-800: #121a2a;               /* fundo do input */
        --border: rgba(255,255,255,.12); /* borda do input */
        --card: #0f1628;                 /* card */
        --accent: #c9a227;               /* sua cor de marca dourada */
    }

    /* ====== Card premium (glass + borda em degrade) ====== */
    .auth-card{
        width: 100%; max-width: 460px;
        background:
            linear-gradient(180deg, color-mix(in srgb, var(--card, #0f1628), #000 3%), var(--card, #0f1628)) padding-box,
            linear-gradient(135deg, color-mix(in srgb, var(--accent, #c9a227), transparent 40%), color-mix(in srgb, #ffffff, transparent 92%)) border-box;
        border: 1px solid transparent;             /* truque pra borda degradê */
        border-radius: 18px;
        box-shadow:
            0 30px 70px rgba(0,0,0,.45),
            inset 0 1px 0 rgba(255,255,255,.06);
        padding: clamp(20px, 3.2vw, 34px);
        transform: translateZ(0);  /* melhora suavidade */
    }

    /* Cabeçalho: marca + título */
    .brand-mark{
        width: 64px; height: 64px; border-radius: 14px;
        display: grid; place-items: center;
        background: linear-gradient(180deg, color-mix(in srgb, var(--accent, #c9a227), transparent 80%), transparent);
        border: 1px solid color-mix(in srgb, var(--accent, #c9a227), transparent 65%);
        color: #fff;
        margin: 0 auto 10px;
        box-shadow: inset 0 1px 0 rgba(255,255,255,.15);
        font-size: 26px;
    }
    .auth-title{
        margin: 0;
        font-weight: 900;
        letter-spacing: .2px;
        color: var(--text-100);
        font-size: clamp(1.6rem, 1rem + 2.2vw, 2.2rem);
        text-align: center;
    }
    .auth-subtle{
        color: var(--text-500);
        text-align:center;
        margin-top: .35rem; margin-bottom: .75rem;
        font-size: .98rem;
    }

    /* ====== Campos ====== */
    .form-label{ color: var(--text-300); font-weight: 700; letter-spacing:.2px; }
    .input-wrap{ position: relative; }
    .input-icon{
        position: absolute; left: 12px; top: 50%; transform: translateY(-50%);
        width: 18px; height: 18px; color: var(--text-500); pointer-events: none;
        opacity: .9;
    }
    .input-control{
        width: 100%;
        background: var(--bg-800); /* fundo fixo do input */
        border: 1px solid var(--border);
        color: #fff;               /* texto digitado branco */
        caret-color: #fff;         /* cursor branco */
        border-radius: 12px;
        padding: 12px 14px 12px 42px;
        outline: none;
        transition: border-color .15s ease, box-shadow .15s ease;
    }
    .input-control::placeholder{ color: #fff; opacity:.8; } /* placeholder branco */
    .input-control:focus,
    .input-control:focus-visible{
        /* não muda o background no foco */
        background: var(--bg-800);
        border-color: var(--accent);
        box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent) 30%, transparent);
        color: #fff; /* mantém texto branco enquanto digita */
    }
    .input-control[aria-invalid="true"]{
        border-color: color-mix(in srgb, #ef4444, transparent 10%);
        box-shadow: 0 0 0 3px color-mix(in srgb, #ef4444 22%, transparent);
    }

    .toggle-password{
        position: absolute; right: 8px; top: 50%; transform: translateY(-50%);
        background: transparent; border: 0; color: var(--text-300);
        padding: 6px 8px; border-radius: 10px; cursor: pointer;
    }
    .toggle-password:hover{ color: var(--text-100); }
    .toggle-password:focus-visible{
        outline: 2px solid var(--accent); outline-offset: 2px;
    }

    .field-error{
        margin-top: 8px;
        color: #fff; /* force error text to white */
        background: color-mix(in srgb, #ef4444 16%, transparent);
        border: 1px solid color-mix(in srgb, #ef4444, transparent 40%);
        border-radius: 10px;
        padding: 8px 10px; font-size: .92rem;
    }

    /* meta: lembrar/esqueci */
    .auth-meta{
        display:flex; justify-content: space-between; align-items: center; gap:.75rem;
        margin: 8px 0 14px; color: var(--text-300); font-size: .95rem;
    }
    .auth-link{ color: var(--text-300); text-decoration: none; border-bottom: 1px dashed transparent; }
    .auth-link:hover{ color: var(--text-100); border-color: var(--text-500); }

    /* ====== Botões ====== */
    .btn-brand{
        width: 100%;
        background:
            linear-gradient(180deg,
                color-mix(in srgb, var(--accent, #c9a227) 100%, transparent),
                color-mix(in srgb, var(--accent, #c9a227) 90%, transparent)
            );
        color: #fff;
        border: 1px solid var(--accent, #c9a227);
        border-radius: 12px;
        padding: 12px 16px;
        font-weight: 900; letter-spacing:.2px;
        box-shadow: 0 10px 24px color-mix(in srgb, var(--accent, #c9a227) 28%, transparent);
        transition: transform .06s ease, filter .15s ease, box-shadow .15s ease;
    }
    .btn-brand:hover{
        filter: brightness(.98);
        box-shadow: 0 12px 28px color-mix(in srgb, var(--accent, #c9a227) 34%, transparent);
    }
    .btn-brand:active{ transform: translateY(1px); }
    .btn-brand:focus-visible{ outline: 2px solid var(--accent); outline-offset: 3px; }
    .btn-brand[disabled]{ opacity: .6; cursor: not-allowed; }

    .btn-ghost{
        width: 100%;
        background: var(--bg-800);
        color: #fff;
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 10px 14px; font-weight: 700;
    }
    .btn-ghost:hover{ background: color-mix(in srgb, #fff 4%, transparent); color: #fff; }

    .btn-google{
        width: 100%;
        display:flex; gap:.6rem; align-items:center; justify-content:center;
        background: var(--bg-800);
        color: #fff;
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 10px 14px; font-weight: 700; text-decoration: none;
    }
    .btn-google:hover{ background: color-mix(in srgb, #fff 4%, transparent); }

    .btn-row{ display: grid; gap: 10px; margin-top: 14px; }

    /* ====== Spinner ====== */
    .spinner{
        display: inline-block; width: 16px; height: 16px;
        border: 2px solid color-mix(in srgb, #000 25%, transparent);
        border-top-color: currentColor; /* segue a cor do texto do botão */
        border-radius: 50%; animation: spin .8s linear infinite;
        vertical-align: -2px; margin-right: 8px;
    }
    @@keyframes spin { to { transform: rotate(360deg); } }

    /* ====== Rodapé fino (opcional) ====== */
    .auth-footer{
        margin-top: 14px; text-align: center; color: var(--text-500);
        font-size: .85rem;
    }

    /* ====== Mobile ====== */
    @@media (max-width: 560px){
        .auth-card{ border-radius: 14px; }
    }

    /* ====== BLOCO EXTRA: blindar cor do input e do autofill (Chrome/Edge/Safari) ====== */
    .input-control:-webkit-autofill,
    .input-control:-webkit-autofill:hover,
    .input-control:-webkit-autofill:focus{
        -webkit-text-fill-color: #fff !important;     /* texto autofill branco */
        caret-color: #fff;
        -webkit-box-shadow: 0 0 0 1000px var(--bg-800) inset !important; /* fundo igual ao input */
        box-shadow: 0 0 0 1000px var(--bg-800) inset !important;
        transition: background-color 9999s ease-out, color 9999s ease-out;
    }
    /* Firefox costuma respeitar, mas garantimos não “pintar” inválido */
    input.input-control:-moz-ui-invalid { box-shadow: none; }

    /* Bootstrap .form-control:focus mudava a cor. Forçar branco no foco aqui. */
    .input-control:focus,
    .input-control:focus-visible{
        /* não muda o background no foco */
        background: var(--bg-800);
        border-color: var(--accent);
        box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent) 30%, transparent);
        color: #fff; /* mantém texto branco enquanto digita */
    }

    /* Opcional: reforça a precedência quando ambos os classes existem */
    .input-control.form-control,
    .input-control.form-control:focus,
    .input-control.form-control:focus-visible{
        color: #fff;
    }
</style>

<!-- Background (fica por trás de tudo) -->
<div class="auth-bg" aria-hidden="true"></div>

<div id="login">
    <div class="auth-card">
        <header class="text-center mb-3">
            <div class="brand-mark">✂️</div>
            <h1 class="auth-title">Login</h1>
            <p class="auth-subtle">Acesse sua conta para continuar</p>
        </header>

        <form novalidate v-on:keyup.enter="loginIn" :aria-busy="isLoading ? 'true' : 'false'">
            <!-- Login -->
            <div class="mb-3">
                <label for="loginInput" class="form-label">Login</label>
                <div class="input-wrap">
                    <svg class="input-icon" viewBox="0 0 24 24" aria-hidden="true">
                        <path fill="currentColor" d="M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5Zm0 2c-4.33 0-8 2.17-8 5v1h16v-1c0-2.83-3.67-5-8-5Z"/>
                    </svg>
                    <input
                        id="loginInput"
                        name="username"
                        type="email"
                        v-model="loginForm.login"
                        class="input-control form-control"
                        placeholder="seu@email.com"
                        autocomplete="username"
                        :aria-invalid="messages.alertLoginInvalidade ? 'true' : 'false'"
                        :aria-describedby="messages.alertLoginInvalidade ? 'loginError' : null">
                </div>
                <div id="loginError" class="field-error" v-show="messages.alertLoginInvalidade" role="alert" aria-live="polite">
                    O campo de login está inválido.
                </div>
            </div>

            <!-- Senha -->
            <div class="mb-2">
                <label for="passwordInput" class="form-label">Password</label>
                <div class="input-wrap">
                    <svg class="input-icon" viewBox="0 0 24 24" aria-hidden="true">
                        <path fill="currentColor" d="M17 8h-1V6a4 4 0 0 0-8 0v2H7a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2Zm-6 8v-2a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0ZM9 8V6a3 3 0 0 1 6 0v2Z"/>
                    </svg>
                    <input
                        id="passwordInput"
                        name="current-password"
                        :type="showPassword ? 'text' : 'password'"
                        v-model="loginForm.password"
                        class="input-control form-control"
                        placeholder="Sua senha"
                        autocomplete="current-password"
                        :aria-invalid="messages.alertPasswordInvalidade ? 'true' : 'false'"
                        :aria-describedby="messages.alertPasswordInvalidade ? 'passwordError' : null">
                    <button type="button"
                            class="toggle-password"
                            :aria-pressed="showPassword ? 'true' : 'false'"
                            aria-label="Mostrar ou ocultar senha"
                            v-on:Click="togglePassword">
                        <svg v-if="!showPassword" width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                            <path d="M12 5c-7 0-10 7-10 7s3 7 10 7 10-7 10-7-3-7-10-7Zm0 12a5 5 0 1 1 5-5 5 5 0 0 1-5 5Z"/>
                        </svg>
                        <svg v-else width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                            <path d="M2 5.27 3.28 4 20 20.72 18.73 22l-2.1-2.1A12.5 12.5 0 0 1 12 19c-7 0-10-7-10-7a21.23 21.23 0 0 1 5-6.1L2 5.27ZM12 7a5 5 0 0 1 5 5 4.94 4.94 0 0 1-.45 2.07L14.9 12.42A2.99 2.99 0 0 0 12 9a2.9 2.9 0 0 0-1.2.26L9.5 7.96A5 5 0 0 1 12 7Z"/>
                        </svg>
                    </button>
                </div>
                <div id="passwordError" class="field-error" v-show="messages.alertPasswordInvalidade" role="alert" aria-live="polite">
                    O campo de senha está incorreto!
                </div>
            </div>

            <!-- Lembrar / Esqueci -->
            <div class="auth-meta">
                <label class="d-inline-flex align-items-center" style="gap:.5rem;">
                    <input type="checkbox"> Lembrar de mim
                </label>
                <a class="auth-link" href="javascript:void(0)" v-on:Click="recoveryPassWord">Esqueci minha senha</a>
            </div>

            <!-- CTA -->
            <div class="text-center">
                <button type="button"
                        class="btn btn-brand btn-lg"
                        :disabled="isLoading"
                        :aria-busy="isLoading ? 'true' : 'false'"
                        v-on:Click="loginIn">
                    <span v-if="isLoading" class="spinner" aria-hidden="true"></span>
                    Entrar
                </button>
            </div>

            <!-- Secundários -->
            <div class="btn-row">
                <button type="button" class="btn btn-ghost btn-lg" v-on:Click="CreateNewClient">Criar uma conta</button>
                <a class="btn-google btn-lg" href="/Login/LoginWithGoogle" role="button" aria-label="Login com Google">
                    <svg width="18" height="18" viewBox="0 0 48 48" aria-hidden="true">
                        <path fill="#FFC107" d="M43.6 20.5H42V20H24v8h11.3C33.7 32.4 29.3 36 24 36c-6.6 0-12-5.4-12-12s5.4-12 12-12c3.1 0 5.9 1.2 8 3.1l5.7-5.7C34.6 6.1 29.6 4 24 4 16.5 4 10 8.2 6.3 14.7z"/>
                        <path fill="#FF3D00" d="M6.3 14.7l6.6 4.8C14.8 16.2 19 13 24 13c3.1 0 5.9 1.2 8 3.1l5.7-5.7C34.6 6.1 29.6 4 24 4 16.5 4 10 8.2 6.3 14.7z"/>
                        <path fill="#4CAF50" d="M24 44c5.2 0 9.9-2 13.4-5.2l-6.2-5.2C29.3 36.4 26.8 37 24 37c-5.2 0-9.6-3.3-11.2-7.9l-6.5 5C10 39.8 16.5 44 24 44z"/>
                        <path fill="#1976D2" d="M43.6 20.5H42V20H24v8h11.3c-1 3-3.3 5.3-6.2 6.6l.1.1 6.2 5.2c-.4.4 7.6-5.6 7.6-16.9 0-1.3-.1-2.7-.4-3.5z"/>
                    </svg>
                    Login com Google
                </a>
            </div>

            <div class="auth-footer">
                © 2025 • BarberShopSystem
            </div>
        </form>
    </div>
</div>

<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var login = new Vue({
        el: '#login',
        data() {
            return {
                loginForm: {
                    login: "",
                    password: "",
                },
                messages: {
                    alertLoginInvalidade: false,
                    alertPasswordInvalidade: false,
                },
                queryString: {
                    isSheduling : false,
                },
                isLoading: false,
                showPassword: false,
            };
        },
        methods: {
            loginIn() {
                this.resetProptsForms();
                this.isLoading = true;

                if (this.validateForm()){
                    this.isLoading = false;
                    return;
                }

                var login = {
                    login: this.loginForm.login,
                    password: this.loginForm.password,
                }
                axios.post('/Login/LoginUser', login, {
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => {
                    if (response.data){
                        if(this.queryString.isSheduling)
                            window.location.href = "/Scheduling/Scheduling";
                        else
                            window.location.href = "/Home/Index";
                    } else {
                        if (typeof Swal !== 'undefined' && Swal.fire) {
                            Swal.fire({
                                title: 'Login inválido!',
                                text: 'O seu login está incorreto!',
                                icon: 'error',
                                confirmButtonText: 'Ok',
                                footer: 'Verifique os dados preenchidos'
                            });
                        }
                    }
                })
                .catch(error => {
                    console.error('Erro ao autenticar:', error);
                    if (typeof Swal !== 'undefined' && Swal.fire) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            icon: 'error',
                            title: 'Erro ao autenticar',
                            text: 'Tente novamente em instantes.'
                        });
                    }
                })
                .finally(() => { this.isLoading = false; });
            },
            validateForm() {
                let formInValidate = false;
                if (this.loginForm.login === "") {
                    this.messages.alertLoginInvalidade = true;
                    formInValidate = true;
                }
                if (this.loginForm.password === "") {
                    this.messages.alertPasswordInvalidade = true;
                    formInValidate = true;
                }
                return formInValidate;
            },
            resetProptsForms() {
                this.messages.alertLoginInvalidade = false;
                this.messages.alertPasswordInvalidade = false;
            },
            CreateNewClient() { window.location.href = "/User/UserRegister"; },
            recoveryPassWord() { window.location.href = "/Login/RecoveryPassword"; },
            getQueryString(){
                let urlParams = new URLSearchParams(window.location.search);
                if(urlParams.has('sheduling')){
                    this.queryString.isSheduling = urlParams.get('sheduling');
                }
            },
            togglePassword(){ this.showPassword = !this.showPassword; },
        },
        mounted(){ this.getQueryString(); }
    })
</script>
