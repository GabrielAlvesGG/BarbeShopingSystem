@using BarberShopSystem.Helpers

@{
    ViewData["Title"] = "Cadastro de Usuarios";
}
<div id="registerUser" v-cloak>
    <div class="overlay" id="loadingOverlay" style="display: none;">
        <div class="loader"></div>
    </div>
    <div class="container mt-5" v-show="showPropts.formsShow">
        <div class="row justify-content-center">
            <div class="col-md-8 p-4 shadow-sm rounded bg-white">
                <div class="col-12 text-center mb-4">
                    <h1>Cadastro de Usuários</h1>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="name" class="form-label">Nome:</label>
                        <input type="text" v-model="form.name" class="form-control" id="name" placeholder="Nome" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertNameInvalidade" role="alert">
                            É necessário preencher o nome do usuário!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="email" class="form-label">E-mail:</label>
                        <input type="email" v-model="form.email" id="email" class="form-control" placeholder="E-mail" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertEmailInvalidade" role="alert">
                            O e-mail está incorreto!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="password" class="form-label">Senha:</label>
                        <input type="password" v-model="form.password" id="password" class="form-control" placeholder="Senha" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertPasswordInvalidade" role="alert">
                            Está faltando preencher o campo senha!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="phone" class="form-label">Telefone:</label>
                        <input type="text" v-model="form.phone" id="phone" class="form-control" placeholder="Telefone" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertPhoneInvalidade" role="alert">
                            Está faltando preencher o campo telefone!
                        </div>
                    </div>
                    
                    @if (SessionHelper.UserType == "Administrador")
                    {
                        <div class="col-md-6 mb-3">
                            <label for="phone" class="form-label">Tipo de usuário:</label>
                            <select class="form-select" aria-label="Default select example" v-model="form.userType">
                                <option value="1">Administrador</option>
                                <option value="2">Barbeiro</option>
                                <option value="3">Cliente</option>
                                
                            </select>
                            <div class="alert alert-danger mt-2" v-show="messages.alertUserTypeInvalidade" role="alert">
                                Está faltando preencher o campo Tipo de usuário!
                            </div>
                        </div>
                    }
                    
                        <div class="col-md-6 mb-3" v-show="form.userType == 2">
                        <label class="form-label d-block">Fumante:</label>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="smoker" value="true" v-model="form.smoker" id="smokerYes">
                            <label class="form-check-label" for="smokerYes">Sim</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="smoker" value="false" v-model="form.smoker" id="smokerNo">
                            <label class="form-check-label" for="smokerNo">Não</label>
                        </div>
                        </div>
                        <div class="col-md-6 mb-3" v-show="form.userType == 2">
                            <label for="name" class="form-label">Tempo de experiência:</label>
                            <input type="number" v-model="form.yearsExperience" class="form-control" id="yearsExperience" placeholder="Tempo de experiência" />
                            <div class="alert alert-danger mt-2" v-show="messages.alertYearsExperienceInvalidade" role="alert">
                                É necessário preencher o tempo de experiência!
                            </div>
                        </div>
                    <div class="col-md-6 mb-3" v-show="form.userType == 2">
                        <label for="file" class="form-label">Escolha uma foto para o barbeiro:</label>
                        <input type="file" id="file" v-on:Change="handleFileUpload" class="form-control" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertYearsExperienceInvalidade" role="alert">
                            É necessário preencher o tempo de experiência!
                        </div>
                    </div>
                        <div class="col-md-12 mb-3" v-show="form.userType == 2">
                            <label for="name" class="form-label">Especialidade:</label>
                            <textarea class="form-control" v-model="form.specialty" placeholder="Escreva as habilidades do barbeiro" id="floatingTextarea"></textarea>
                        <div class="alert alert-danger mt-2" v-show="messages.alertSpecialtyInvalidade" role="alert">
                                É necessário preencher as habilidades do barbeiro!
                            </div>
                        </div>
                
                    <div class="col-md-6 mb-3" v-show="form.userType == 3">
                        <label for="name" class="form-label">Endereço:</label>
                        <input type="text" v-model="form.address" class="form-control" id="name" placeholder="Endereço" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertAddressInvalidade" role="alert">
                            É necessário preencher o endereço!
                        </div>
                    </div>
                    <div class="col-12 text-center">
                        <button type="button" class="btn btn-success btn-lg text-white" v-on:Click="registerUser">Cadastrar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/Helper.js?v=1.0.0"></script>
<script>
    registerUser = new Vue({
       el: '#registerUser',
       data() {
         return {
             form:{
               id:0,
               name: '',
               email: '',
               password: '',
               phone:'',
               userType: '3',
               address: '',
               specialty:'',
               barberId: 0,
               smoker:false,
               yearsExperience: 0,
               imageUrl: '' ,
             },
             selectedFile: null,
             messages: {
                   alertNameInvalidade: false,
                    alertEmailInvalidade: false,
                   alertPasswordInvalidade: false,
                   alertPhoneInvalidade :false,
                   alertUserTypeInvalidade: false,
                   alertAddressInvalidade: false,
                   alertYearsExperienceInvalidade: false,
                   alertSpecialtyInvalidade: false,
             },
             showPropts:{
                 formsShow: false,
             }
         };
       },
       methods:
       {
    registerUser() {
        this.showLoader();
        this.resetValidateForm();

        if (this.validateForm()) {
            
            const user = {
                id: this.form.id,
                nome: this.form.name,
                email: this.form.email,
                senha: this.form.password,
                tipoUsuario: Number(this.form.userType),
                telefone: this.form.phone,
                barber: this.form.userType === "2" ? { 
                    id: this.form.barberId,
                    usuarioId: this.form.id,
                    especialidade: this.form.specialty,
                    disponibilidade: '',
                    smoker: this.form.smoker == "true" ? 1 : 0,
                    experience: Number(this.form.yearsExperience)
                } : null,
                client: this.form.userType === "3" ? { 
                    id: this.form.clientId,
                    usuarioId: this.form.id,
                    endereco: this.form.address
                } : null
            };

            
            let formData = new FormData();
            formData.append("user", JSON.stringify(user)); 
            if (this.selectedFile) {
                formData.append("file", this.selectedFile);
            }

            
            axios.post('/User/InsertUserAndUpdate', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            })
            .then(response => {
                this.hideLoader();
                Swal.fire({
                    title: 'Sucesso!',
                    text: this.form.id == 0 ? 'Usuário cadastrado com sucesso!' : 'Usuário editado com sucesso!',
                    icon: 'success',
                    confirmButtonText: 'Ok'
                });

                if (this.form.id == 0) {
                    setTimeout(() => {
                        window.location.href = "/Login/Login";
                    }, 3000);
                }
            })
            .catch(error => {
                console.error('Erro ao cadastrar:', error);
            });
        } else {
            this.hideLoader();
        }
    },
         editMode(idUser){ /*Ajustar essa função para receber o usuário e não mais o barbeiero que era o modelo antigo dele.*/ 
                let idOldUser = idUser;
                 axios.post('/User/EditUser', idOldUser, {
                headers: {
                'Content-Type': 'application/json'
              }})
              .then(response => {
                  this.form.id = response.data.id;
                  this.form.name= response.data.name;
                  this.form.email= response.data.email;
                  this.form.password= response.data.passWord;
                  this.form.phone= response.data.phone;
              })
              .catch(error => {
                console.error('Erro ao cadastrar:', error);
              }).finally(function (){
                  registerUser.hideLoader();
              });
          },
         getQueryString(){
             let urlParams = new URLSearchParams(window.location.search);

             if(urlParams.has('id')){
                  let idUser= Number(urlParams.get('id'));
                   this.editMode(idUser);
             }
             else
                 this.hideLoader();
          },
         formatToPTBR(date) {
             return date.split("T")[0];
         },
         validateForm() {
             const fields = {
                 name: "alertNameInvalidade",
                 email: "alertEmailInvalidade",
                 password: "alertPasswordInvalidade",
                 phone: "alertPhoneInvalidade",
                 userType: "alertUserTypeInvalidade",
                 address: "alertAddressInvalidade",
                 yearsExperience: "alertYearsExperienceInvalidade",
                 specialty: "alertSpecialtyInvalidade",
             };

             let fullForm = true;

             for (const [field, alert] of Object.entries(fields)) {
                  if (field === "address" && this.form[field] !== "2") {
                       this.messages[alert] = false;
                        continue;
                  }
                 if (this.form[field] === "") {
                     this.messages[alert] = true;
                     fullForm = false;
                 } else {
                     this.messages[alert] = false;
                 }
             }

             return fullForm;
         },

         resetValidateForm(){
              this.messages.alertNameInvalidade = false;
              this.messages.alertEmailInvalidade = false;
              this.messages.alertPasswordInvalidade = false;
              this.messages.alertPhoneInvalidade = false;
              this.messages.alertUserTypeInvalidade = false;
              this.messages.alertAddressInvalidade = false;
              this.messages.alertYearsExperienceInvalidade = false;
              this.messages.alertSpecialtyInvalidade = false;
         },
         showLoader() {
             this.showPropts.formsShow = false;
             document.getElementById('loadingOverlay').style.display = 'flex';
         },
         hideLoader() {
             this.showPropts.formsShow = true;
             document.getElementById('loadingOverlay').style.display = 'none';
         },
         handleFileUpload(event) {
            this.selectedFile = event.target.files[0]; 
        },
       },
       mounted(){
            this.showLoader();
            this.getQueryString();
       }
     });
</script>