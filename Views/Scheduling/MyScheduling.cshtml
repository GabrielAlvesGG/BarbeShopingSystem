@using BarberShopSystem.Helpers
@{
    ViewData["Title"] = "Agendamentos";
}
<link href="~/css/MyScheduling.css" rel="stylesheet"/>

<div id="myScheduling" class="container">
    <div class="row">
        <div class="col-md-4 col-lg-5 order-md-last" v-show="isAppointmentCancellationVisible">
            <div class="card card-shadow-1 mb-1">
                <div class="card-header calendar-header">
                    <h3 class="card-title flex-grow-1 mb-0 w-100">Cancelar agendamento</h3>
                </div>
                <div class="card-body" >
                    <div class="scheduling-container">
                        <table class="table table-striped table-hover table-bordered">
                        <tr>
                            <th>Id</th>
                                <th v-show="showNameBarber">Barbeiro</th>
                                <th v-show="!showNameBarber">Cliente</th>
                            <th>Descrição</th>
                            <th>Tempo</th>
                            <th>Horario</th>
                            <th>Valor</th>
                            <th>Status</th>
                            <th></th>
                        </tr>
                            <tr v-for="(appoint, index) in appointmentsList" :accesskey="appoint.idAppointments">
                                <td>{{appoint.idAppointments}}</td>
                                <td>{{appoint.nameShowBarberOrCliente}}</td>
                                <td>{{appoint.customer.description}}</td>
                                <td>{{convertMinutesToHours(appoint.customer.duration)}}</td>
                                <td>{{formatedDateTime(appoint.dateTime)}}</td>
                                <td>R${{appoint.customer.price}}</td>
                                <td>{{appoint.statusAppointment}}</td>
                                <td><button type="button" class="btn btn-success text-white" v-show="!showNameBarber && appoint.statusAppointment != 'Confirmado'" v-on:Click="ConfirmeAppointments(appoint.idAppointments)" >Confirme</button><button type="button" class="btn btn-danger text-white" v-on:Click="GetIdAppointment(appoint.idAppointments)" data-bs-toggle="modal" data-bs-target="#CancelAppointmentsModal">Cancelar Agendamentos </button></td>
                        </tr>
                    </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Cancel Appointments -->
    <div class="modal fade" id="CancelAppointmentsModal" tabindex="-1" aria-labelledby="CancelAppointmentsModalLabel" aria-hidden="true" ref="modalCancel">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="CancelAppointmentsModalLabel">Deseja realmente Cancelar o agendamento?</h1>
                    <button type="button" class="btn-close" v-on:Click="ResetPossibleCancelAppointments()" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Deseja cancelar o Agendamento ? 
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" v-on:Click="ResetPossibleCancelAppointments()">Voltar</button>
                    <button type="button" class="btn btn-danger" v-on:Click="CancelAppoindment()">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Cancel Appointments -->

    <!-- Modal the user not logged in -->
    <div class="modal fade" id="UserNotLoggedModal" tabindex="-1" aria-labelledby="UserNotLoggedModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="UserNotLoggedModalLabel">Faça login para agendar um horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Para continuar com o agendamento, é necessário estar logado. Você será redirecionado para a tela de login e, após autenticação, retornará automaticamente para esta página.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                    <button type="button" class="btn btn-info" v-on:Click="RedirectLoginPage()">Fazer login</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user not logged in -->


</div>

<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var myScheduling = new Vue({
        el: '#myScheduling',
        data() {
            return {
                listaDeHorarios: [],
                maxButtons: 10 ,
                isAppointmentCancellationVisible: false,
                appointmentsList: [],
                possibleCancelAppointment: 0,
                userLogged: false,
                CustomersList:[],
                selectedService: 0,
                showNameBarber: false,
                showButtonConfirm: false,
            }
        },
        methods: {
            formatTime(horario) {
                // Remove seconds from the time string
                return horario.slice(0, -3);
            },
            LoggedInClient(){
                   axios.post('/Session/IsUserLoggedIn')
                .then(response => {
                  this.userLogged = response.data;  
                  if(this.userLogged)
                        this.hasScheduling();
                  
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            hasScheduling(){
                      axios.get('/Scheduling/HasSchelulingClient',)
                .then(response => {
                    var result = JSON.parse(response.data)
                  if( result.appointiments.length > 0 ){
                       this.appointmentsList = result.appointiments;
                       this.showNameBarber = result.showNameBarber;
                       this.isAppointmentCancellationVisible = true;
                  }
                  else {
                       this.appointmentsList = result.appointiments;
                       this.showNameBarber = result.showNameBarber;
                       this.isAppointmentCancellationVisible = false;
                  }
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            GetIdAppointment(idAppointment)
            {
                this.possibleCancelAppointment = idAppointment;
            },
            ResetPossibleCancelAppointments(){
             this.possibleCancelAppointment = 0;
          },
            CancelAppoindment(){
              let idAppointment = this.possibleCancelAppointment;
                   axios.post('/Scheduling/CancelAppointment', idAppointment,
                   { headers : { 'Content-Type': 'application/json' }})
                .then(response => {

                  if(response.data){
                        this.hasScheduling();
                        this.hiddenModelAppointmentsCancel();
                    
                       Swal.fire({
                        title: 'Agendamento cancelado',
                        text: 'O agendamento foi cancelado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Cancelado com sucesso!'
                    });
                  }
                  else{
                      Swal.fire({
                        title: 'Falha ao cancelar o agendamento',
                        text: 'Durante a execução do cancelamento ocorreu um erro !',
                        icon: 'error',
                        confirmButtonText: 'Ok',
                        footer: 'Tente novamente !'
                    });
                  }

                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
          },
            RedirectLoginPage(){
                window.location.href = "/Login/Login";
            },
            OpenModalUserNotLoogedModal(){
               let modal = new bootstrap.Modal(document.getElementById("UserNotLoggedModal"));
                modal.show();
            },
            hiddenModelAppointmentsCancel(){
                const modalElement = document.getElementById('CancelAppointmentsModal');
                const modal = bootstrap.Modal.getInstance(modalElement);
                modal.hide();
            },
            formatedDateTime(date){
                    const dateTime = new Date(date);
                    return dateTime.toLocaleString('pt-BR');
            },
            ConfirmeAppointments(idAppointment){
                   axios.post('/Scheduling/ConfirmeAppointment', idAppointment,
                   { headers : { 'Content-Type': 'application/json' }})
                .then(response => {
                   
                       Swal.fire({
                        title: 'Agendamento Foi confirmado',
                        text: 'O agendamento foi confirmado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Confirmado com sucesso!'

                        })
                        this.hasScheduling();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            convertMinutesToHours(minutes) {
                if (typeof minutes !== "number" || minutes < 0) {
                    return "Entrada inválida. Insira um número positivo de minutos.";
                }

                const hours = Math.floor(minutes / 60);
                const remainingMinutes = minutes % 60;

                return `${hours} hora(s) e ${remainingMinutes} minuto(s)`;
            }
        },
        mounted() {
               this.LoggedInClient();
        }
    });
</script>