@using BarberShopSystem.Helpers
@{
    ViewData["Title"] = "Agendamentos";
}

<div id="scheduling" class="container">
    <div class="row">
        <div class="col-md-4 col-lg-5 order-md-last" v-show="isAppointmentCancellationVisible">
            <div class="card card-shadow-1 mb-1">
                <div class="card-header calendar-header">
                    <h3 class="card-title flex-grow-1 mb-0 w-100">Cancelar agendamento</h3>
                </div>
                <div class="card-body" >
                    <div class="scheduling-container">
                        <table class="table table-striped table-hover table-bordered">
                        <tr>
                            <th>Id</th>
                            <th>Descrição</th>
                            <th>Horario</th>
                            <th>Valor</th>
                            <th></th>
                        </tr>
                            <tr v-for="(appoint, index) in appointmentsList" :accesskey="appoint.idAppointments">
                                <td>{{appoint.idAppointments}}</td>
                                <td>{{appoint.customer.description}}</td>
                                <td>{{formatedDateTime(appoint.dateTime)}}</td>
                                <td>R${{appoint.customer.price}}</td>
                                <td><button type="button" class="btn btn-danger text-white" v-on:Click="GetIdAppointment(appoint.idAppointments)" data-bs-toggle="modal" data-bs-target="#CancelAppointmentsModal">Cancelar Agendamentos </button></td>
                                
                        </tr>
                    </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Cancel Appointments -->
    <div class="modal fade" id="CancelAppointmentsModal" tabindex="-1" aria-labelledby="CancelAppointmentsModalLabel" aria-hidden="true" ref="modalCancel">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="CancelAppointmentsModalLabel">Deseja realmente Cancelar o agendamento?</h1>
                    <button type="button" class="btn-close" v-on:Click="ResetPossibleCancelAppointments()" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Deseja cancelar o Agendamento ? 
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" v-on:Click="ResetPossibleCancelAppointments()">Voltar</button>
                    <button type="button" class="btn btn-danger" v-on:Click="CancelAppoindment()">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Cancel Appointments -->

    <!-- Modal the user not logged in -->
    <div class="modal fade" id="UserNotLoggedModal" tabindex="-1" aria-labelledby="UserNotLoggedModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="UserNotLoggedModalLabel">Faça login para agendar um horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Para continuar com o agendamento, é necessário estar logado. Você será redirecionado para a tela de login e, após autenticação, retornará automaticamente para esta página.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                    <button type="button" class="btn btn-info" v-on:Click="RedirectLoginPage()">Fazer login</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user not logged in -->


</div>

<style>
    .scheduling-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .scheduling-button-wrapper {
        flex: 1 1 20%; /* Ajusta a porcentagem para controlar o número de botões por linha */
        display: flex;
        justify-content: center;
    }

    .scheduling-container button {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .scheduling-container button:hover {
            background-color: #0056b3;
        }

    .indisponivel {
        background-color: #dc3545; /* Cor de fundo para "Indisponível" */
        text-decoration: line-through; /* Riscar o texto */
    }

        .indisponivel:hover {
            background-color: #c82333; /* Cor ao passar o mouse em "Indisponível" */
        }

    .card-shadow-1 {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .calendar-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
</style>


<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var scheduling = new Vue({
        el: '#scheduling',
        data() {
            return {
                listaDeHorarios: [],
                maxButtons: 10 ,
                isAppointmentCancellationVisible: false,
                appointmentsList: [],
                possibleCancelAppointment: 0,
                userLogged: false,
                CustomersList:[],
                selectedService: 0,
            }
        },
        methods: {
            GetScheduling() { // passo 1 : Pega todos os horários 
                axios.post('/Scheduling/GetScheduling')
                .then(response => {
                    Swal.fire({
                        title: 'Horários carregados!',
                        text: 'Selecione um horário disponível.',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Verifique os dados preenchidos'
                    });
                    this.listaDeHorarios = response.data; // passo 2 : Armazena os periodos de horários com seus valores de livres e agendados
                    this.LoggedInClient();// passo 3 : Verifica se o usuário está logado
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            selecionarHorario(horario) {
                if(this.userLogged){
                    let time = horario;


                    const appoinments  = {
                        dateTime :time,
                        custom :{id: this.selectedService},
                    };


                    axios.post('/Scheduling/BookingATime', 
                    appoinments, {
                    headers: {
                        'Content-Type': 'application/json'}
                    })
                    .then(response => {
                        Swal.fire({
                            title: 'Horários carregados!',
                            text: 'Selecione um horário disponível.',
                            icon: 'success',
                            confirmButtonText: 'Ok',
                            footer: 'Verifique os dados preenchidos'
                        });
                        this.GetScheduling();
                    })
                    .catch(error => {
                        console.error('Erro ao carregar horários:', error);
                    });
                }
                else{
                    this.OpenModalUserNotLoogedModal();
                }
                       
            },
            formatTime(horario) {
                // Remove seconds from the time string
                return horario.slice(0, -3);
            },
            LoggedInClient(){ // passo 4 : vai até o back-end verificar qual é a situação do usuário no momento se ele está logado ou não 
                   axios.post('/Login/IsUserLoggedIn')
                .then(response => {
                  this.userLogged = response.data;  // passo 5 : Armazena a situação atual, deixando true se ele estiver logado e false se estiver como um usuário anônimo
                  if(this.userLogged)
                        this.hasScheduling(); // passo 6 : caso esteja com um login ativo o sistema ira verificar quais são os agendamentos referente a esse usuário.
                  
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            hasScheduling(){
                      axios.post('/Scheduling/HasSchelulingClient',)// passo 7 : vai no back-end buscar todos os agendamentos referente ao usuário que está logado.
                .then(response => {

                  if( response.data.length > 0 ){
                       this.appointmentsList = response.data;
                       this.isAppointmentCancellationVisible = true;
                  }
                  else {
                      this.appointmentsList = response.data;
                       this.isAppointmentCancellationVisible = false;
                  }
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            GetIdAppointment(idAppointment)
            {
                this.possibleCancelAppointment = idAppointment;
            },
            ResetPossibleCancelAppointments(){
             this.possibleCancelAppointment = 0;
          },
            CancelAppoindment(){
              let idAppointment = this.possibleCancelAppointment;
                   axios.post('/Scheduling/CancelAppointment', idAppointment , { headers: {
                    'Content-Type': 'application/json'}
                })
                .then(response => {

                  if(response.data){
                        this.GetScheduling();
                        this.hiddenModelAppointmentsCancel();
                    
                       Swal.fire({
                        title: 'Agendamento cancelado',
                        text: 'O agendamento foi cancelado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Verifique os dados preenchidos'
                    });
                  }

                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
          },
            RedirectLoginPage(){
                window.location.href = "/Login/Login";
            },
            OpenModalUserNotLoogedModal(){
               let modal = new bootstrap.Modal(document.getElementById("UserNotLoggedModal"));
                modal.show();
            },
            hiddenModelAppointmentsCancel(){
                const modalElement = document.getElementById('CancelAppointmentsModal');
                const modal = bootstrap.Modal.getInstance(modalElement);
                modal.hide();
            },
            GetServices(){
                    axios.post('/Scheduling/GetCustomers')
                .then(response => {
                    this.CustomersList = response.data;
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            formatedDateTime(date){

                    const dateTime = new Date(date);
                    return dateTime.toLocaleString('pt-BR');
            }
        },
        mounted() {
            this.GetServices();
            this.GetScheduling();  
        }
    });
</script>