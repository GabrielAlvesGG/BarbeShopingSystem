@using BarberShopSystem.Helpers
@{
    ViewData["Title"] = "Agendamentos";
}
@section Styles {
    <link href="~/css/MyScheduling.css" rel="stylesheet" asp-append-version="true" />
    <!-- Vue Toastification CSS -->
    <link rel="stylesheet" href="https://unpkg.com/vue-toastification@1.7.14/dist/index.css" />
    <style>
        :root {
            /* Map SweetAlert2 to DS tokens (fallback to Bootstrap if needed) */
            --swal2-confirm-button-background: var(--success, var(--bs-success));
            --swal2-confirm-button-color: #fff;
            --swal2-cancel-button-background: var(--accent, var(--bs-secondary));
            --swal2-cancel-button-color: #fff;
            --swal2-deny-button-background: var(--danger, var(--bs-danger));
            --swal2-deny-button-color: #fff;

            /* Elevation and radius as used in modal */
            --shadow-sm: 0 1px 3px rgba(0,0,0,.3), 0 1px 2px rgba(0,0,0,.24);
            --shadow-md: 0 10px 30px rgba(0,0,0,.35);
            --radius-lg: 16px;
            --radius-md: 12px;

            /* Primary scale tokens to match Scheduling */
            --bs-primary-600: color-mix(in srgb, var(--bs-primary, #0d6efd), black 15%);
            --bs-primary-700: color-mix(in srgb, var(--bs-primary, #0d6efd), black 30%);
        }

        /* Wrapper and page surface (dark theme) */
        #myScheduling,
        #myScheduling .content-bg {
            background-color: var(--bg-900, #0b1220);
            color: var(--fg, #e5e7eb);
        }
        .novo-padrao { max-width: 100%; width: 100%; }
        .content-bg {
            border-radius: 24px;
            border: 1px solid var(--card-border, rgba(255,255,255,.06));
            background-image: none;
            box-shadow: inset 0 1px 0 rgba(255,255,255,.03);
        }
        @@media (max-width: 768px) { .content-bg { border-radius: 16px; } }

         .page-hero {
            /* srgb fallback */
            background: linear-gradient(135deg, var(--brand, #fcb902), var(--brand-2, #d4a100));
            /* okLab requested style */
            background: linear-gradient(135deg, color-mix(in oklab, var(--brand, #fcb902), #000 6%), color-mix(in oklab, var(--brand-2, #d4a100), #000 12%));
            color: #fff;
            box-shadow: 0 8px 24px rgba(2, 8, 23, .12);
        }
        .page-hero .hero-icon {
            background: color-mix(in oklab, var(--brand, #fcb902), #ffffff 88%);
            color: color-mix(in oklab, var(--brand-2, #d4a100), #000 10%);
        }

        

        .hover-elevate:hover { transform: translateY(-2px); box-shadow: var(--shadow-md); }

        /* Cards aligned to DS */
        .panel-card {
            background: var(--card-bg, #0f1628);
            border: 1px solid var(--card-border, rgba(255,255,255,.06));
            border-radius: var(--radius-lg);
        }
        .panel-card .card-header {
            background: var(--bg-800, #121a2a);
            color: var(--fg, #e5e7eb);
            border-bottom: 1px solid var(--card-border, rgba(255,255,255,.06));
        }
        .panel-card .card-title { font-weight: 600; }

 /* === FIX 1: contraste de texto e hover do Bootstrap na tabela ================== */
#myScheduling .table.table-modern :where(thead th, tbody td){
  color: #000000 !important; /* texto preto */
}
/* Garante que o hover não clareie o texto */



/* === FIX 2: zebra ============================================================= */
#myScheduling .table.table-modern tbody tr:nth-child(odd){
  background: color-mix(in srgb, var(--card-bg, #6b789918), #fff 2%);
}
#myScheduling .table.table-modern tbody tr:nth-child(even){
  background: color-mix(in srgb, var(--card-bg, #606a8346), #c2baba21 3%);
}
#myScheduling .table.table-modern tbody tr:hover{
  background: color-mix(in srgb, var(--card-bg, #8672720a), #fff 6%);
}

/* === FIX 3: cabeçalho ========================================================= */
#myScheduling .table.table-modern thead th{
  background: linear-gradient(0deg,
              color-mix(in srgb, var(--bg-800, #121a2a), #000 6%),
              var(--bg-800, #121a2a));
  border-bottom: 1px solid var(--card-border, rgba(255,255,255,.16));
  font-weight: 700;
}

/* === FIX 4: alinhamentos e cortes ============================================ */
#myScheduling .table.table-modern{
  table-layout: fixed;
  width: 100%;
  min-width: 980px;
}
@@media (max-width: 992px){ #myScheduling .table.table-modern{ min-width: 900px; } }
@@media (max-width: 576px){ #myScheduling .table.table-modern{ min-width: 780px; } }

#myScheduling .table.table-modern td{
  padding: .95rem 1rem;
  line-height: 1.4;
  vertical-align: middle;
  border-top: 1px solid color-mix(in srgb, var(--card-border, rgba(255,255,255,.06)), transparent 40%);
  color: #000 !important;
}

#myScheduling .table.table-modern td.cell-desc{
  white-space: normal;
  overflow-wrap: anywhere;
  color: #000; /* texto preto apenas aqui também */
}
#myScheduling .table.table-modern td.cell-id,
#myScheduling .table.table-modern td.cell-time,
#myScheduling .table.table-modern td.cell-datetime,
#myScheduling .table.table-modern td.cell-price,
#myScheduling .table.table-modern td.cell-status,
#myScheduling .table.table-modern td.cell-actions{
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
#myScheduling .table.table-modern td.cell-price{
  text-align: right;
  font-variant-numeric: tabular-nums;
}

/* === FIX 5: chips de status (mantém suas cores) ============================== */
#myScheduling .table.table-modern .status-badge{
  display: inline-block;
  padding: .4rem .65rem;
  border-radius: 999px;
  font-weight: 700;
  font-size: .8rem;
  border: 1px solid var(--card-border, rgba(255,255,255,.12));
  background: color-mix(in srgb, var(--card-bg, #0f1628), var(--fg, #e5e7eb) 4%);
  color: var(--fg, #e5e7eb);
}
#myScheduling .table.table-modern .status-badge.success{
  color: #22c55e;
  background: color-mix(in srgb, #22c55e, transparent 85%);
  border-color: color-mix(in srgb, #22c55e, transparent 65%);
}
#myScheduling .table.table-modern .status-badge.danger{
  color: #ef4444;
  background: color-mix(in srgb, #ef4444, transparent 85%);
  border-color: color-mix(in srgb, #ef4444, transparent 65%);
}

/* === FIX 6: ações ============================================================ */
#myScheduling .table.table-modern td.cell-actions{
  display: flex;
  gap: .5rem;
  justify-content: center;
}
@@media (max-width: 576px){
  #myScheduling .btn .btn-label{ display:none; } /* mantém ícone apenas no mobile */
}
        @@media (max-width: 992px) {
            #myScheduling .table.table-modern { min-width: 900px; }
        }
        
        .table-modern {
            border: 1px solid var(--card-border, rgba(255,255,255,.06));
            border-radius: 12px;
            background: var(--card-bg, #0f1628);
            border-collapse: separate;
            border-spacing: 0;
            box-shadow: inset 0 1px 0 rgba(255,255,255,.02);
            table-layout: fixed;
            width: 100%;
        }
        .table-modern caption.table-caption {
            caption-side: top;
            text-align: left;
            padding: .5rem 1rem .25rem;
            color: var(--fg-muted, #94a3b8);
            font-size: .85rem;
            letter-spacing: .01em;
            opacity: .9;
        }
        #myScheduling .table.table-modern thead th {
            position: sticky;
            top: 0;
            z-index: 5; /* above body cells */
            color: var(--fg, #e5e7eb);
            background: var(--bg-800, #121a2a27);
        }

        #myScheduling .table.table-modern tbody td {
            color: var(--fg-strong, #cbd5e1);
            padding: .9rem 1rem;
            line-height: 1.35;
        }

        /* Column behaviors and truncation */
        #myScheduling .table.table-modern td.cell-desc {
            white-space: normal;
            overflow-wrap: anywhere;
            color: var(--fg, #e5e7eb);
        }
        #myScheduling .table.table-modern td.cell-id,
        #myScheduling .table.table-modern td.cell-time,
        #myScheduling .table.table-modern td.cell-datetime,
        #myScheduling .table.table-modern td.cell-price,
        #myScheduling .table.table-modern td.cell-status,
        #myScheduling .table.table-modern td.cell-actions {
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
        }
        #myScheduling .table.table-modern td.cell-price {
            text-align: right;
            font-variant-numeric: tabular-nums;
        }
        #myScheduling .table.table-modern td.cell-actions {
            display: flex;
            gap: .5rem;
            justify-content: center;
        }

        /* Zebra/hover using DS tokens (no opacity on rows) */
        #myScheduling .table.table-modern tbody tr:nth-child(odd){ background: color-mix(in srgb, var(--card-bg, #0f1628), #fff 2%); }
        #myScheduling .table.table-modern tbody tr:nth-child(even){ background: color-mix(in srgb, var(--card-bg, #0f1628), #000 3%); }
        #myScheduling .table.table-modern tbody tr:hover{ background: color-mix(in srgb, var(--card-bg, #0f1628), #fff 6%); }

        /* Status chips (scoped) */
        #myScheduling .table.table-modern .status-badge {
            border:1px solid var(--card-border, rgba(255,255,255,.12));
            background: color-mix(in srgb, var(--card-bg,#0f1628), var(--fg,#e5e7eb) 4%);
            color: var(--fg, #e5e7eb);
        }
        #myScheduling .table.table-modern .status-badge.success{
            color:#22c55e;
            background: color-mix(in srgb, #22c55e, transparent 85%);
            border-color: color-mix(in srgb, #22c55e, transparent 65%);
        }
        #myScheduling .table.table-modern .status-badge.danger{
            color:#ef4444;
            background: color-mix(in srgb, #ef4444, transparent 85%);
            border-color: color-mix(in srgb, #ef4444, transparent 65%);
        }

        /* Buttons within this view aligned to DS tokens */
        #myScheduling .btn-success {
            background-color: var(--success, var(--accent, #22c55e));
            border-color: var(--success, var(--accent, #22c55e));
            color: #fff !important;
        }
        #myScheduling .btn-success:hover, #myScheduling .btn-success:focus {
            background-color: color-mix(in srgb, var(--success, #22c55e), black 10%);
            border-color: color-mix(in srgb, var(--success, #22c55e), black 10%);
        }
        #myScheduling .btn-danger {
            background-color: var(--danger, #ef4444);
            border-color: var(--danger, #ef4444);
            color: #fff !important;
        }
        #myScheduling .btn-danger:hover, #myScheduling .btn-danger:focus {
            background-color: color-mix(in srgb, var(--danger, #ef4444), black 10%);
            border-color: color-mix(in srgb, var(--danger, #ef4444), black 10%);
        }
        #myScheduling .btn-outline-danger {
            color: var(--danger, #ef4444);
            border-color: color-mix(in srgb, var(--danger, #ef4444), transparent 65%);
            background: transparent;
        }
        #myScheduling .btn-outline-danger:hover, #myScheduling .btn-outline-danger:focus {
            background-color: var(--danger, #ef4444);
            border-color: var(--danger, #ef4444);
            color: #fff !important;
        }
        #myScheduling .btn-outline-secondary {
            background-color: var(--bg-800, #121a2a);
            border-color: var(--card-border, rgba(255,255,255,.12));
            color: var(--fg, #e5e7eb) !important;
        }
        #myScheduling .btn-outline-secondary:hover, #myScheduling .btn-outline-secondary:focus {
            background-color: color-mix(in srgb, var(--bg-800, #121a2a), black 10%);
            border-color: var(--card-border, rgba(255,255,255,.24));
            color: var(--fg, #e5e7eb) !important;
        }

        /* Modal polish using same DS tokens as reference modal */
        .modal-modern .modal-content {
            background: var(--card-bg, #0f1628);
            border: 1px solid var(--card-border, rgba(255,255,255,.06));
            border-radius: 16px;
            box-shadow: var(--shadow-md);
            color: var(--fg, #e5e7eb);
        }
        .modal-modern .modal-header, .modal-modern .modal-footer {
            background: var(--bg-800, #121a2a);
            border-color: var(--card-border, rgba(255,255,255,.06));
        }
        .modal-modern .modal-body { background: var(--card-bg, #0f1628); color: var(--fg, #e5e7eb); }
        .modal-icon {
            width: 40px; height: 40px; display: inline-grid; place-items: center; border-radius: 10px; margin-right: .5rem; font-size: 18px;
        }
        .modal-icon.success { background: color-mix(in srgb, var(--success, #22c55e), transparent 80%); color: var(--success, #22c55e); }
        .modal-icon.danger  { background: color-mix(in srgb, var(--danger, #ef4444), transparent 80%); color: var(--danger, #ef4444); }
        .modal-icon.info    { background: color-mix(in srgb, var(--accent, #3b82f6), transparent 80%); color: var(--accent, #3b82f6); }
        .modal-actions { display: flex; gap: .5rem; flex-wrap: wrap; }

        /* SweetAlert2 buttons (use DS tokens) */
        .swal2-container .swal2-popup .swal2-styled.swal2-confirm {
            background: var(--swal2-confirm-button-background) !important; color: var(--swal2-confirm-button-color) !important; border: 0 !important;
        }
        .swal2-container .swal2-popup .swal2-styled.swal2-confirm:hover {
            background: color-mix(in srgb, var(--swal2-confirm-button-background), black 10%) !important;
        }
        .swal2-container .swal2-popup .swal2-styled.swal2-deny {
            background: var(--swal2-deny-button-background) !important; color: var(--swal2-deny-button-color) !important; border: 0 !important;
        }
        .swal2-container .swal2-popup .swal2-styled.swal2-deny:hover {
            background: color-mix(in srgb, var(--swal2-deny-button-background), black 10%) !important;
        }
        .swal2-container .swal2-popup .swal2-styled.swal2-cancel {
            background: var(--swal2-cancel-button-background) !important; color: var(--swal2-cancel-button-color) !important; border: 0 !important;
        }
        .swal2-container .swal2-popup .swal2-styled.swal2-cancel:hover {
            background: color-mix(in srgb, var(--swal2-cancel-button-background), black 10%) !important;
        }

        /* Toasts visually consistent with DS */
        .Vue-Toastification__toast {
            background: var(--card-bg, #0f1628) !important;
            color: var(--fg, #e5e7eb) !important;
            border: 1px solid var(--card-border, rgba(255,255,255,.06)) !important;
            box-shadow: var(--shadow-sm) !important;
        }

        /* Fill viewport and occupy remaining space below the table */
        #myScheduling .content-bg {
            min-height: 100vh;
            min-height: 100dvh; /* mobile-friendly viewport */
            display: flex;
            flex-direction: column;
        }
        #myScheduling .content-bg > .row {
            flex: 1 1 auto;
            display: flex;
        }
        #myScheduling .content-bg > .row > [class*="col-"] {
            display: flex;
            flex-direction: column;
        }
        #myScheduling .panel-card {
            flex: 1 1 auto;
            display: flex;
            flex-direction: column;
        }
        #myScheduling .panel-card .card-body {
            flex: 1 1 auto;
            display: flex;
            flex-direction: column;
        }
        #myScheduling .table-modern-wrapper {
            flex: 1 1 auto;
            min-height: 0; /* allow proper flex overflow */
        }
        #myScheduling .table-modern-wrapper > .table {
            margin-bottom: 0; /* remove extra gap at the bottom */
        }

        /* Make action buttons more compact on mobile (icons only) */
        #myScheduling .btn .btn-label { margin-left: .35rem; }
        @@media (max-width: 576px) {
            #myScheduling .btn .btn-label { display: none; }
        }

        /* Empty state styling (professional, on-brand) */
        .empty-state {
            display: grid;
            place-items: center;
            text-align: center;
            padding: 3rem 1rem;
            background: var(--card-bg, #0f162854);
            border: 1px solid var(--card-border, rgba(255,255,255,.06));
            border-radius: var(--radius-lg, 16px);
        }
        .empty-state-icon {
            width: 56px; height: 56px; border-radius: 12px;
            display: grid; place-items: center;
            margin-bottom: .75rem;
            background: color-mix(in oklab, var(--brand, #fcb902), #000 12%);
            color: #000;
            font-size: 26px;
            box-shadow: inset 0 1px 0 rgba(255,255,255,.12);
        }
        .empty-state p { color: var(--fg-muted, #94a3b8); margin: 0; }

        /* Header text must be white (overrides the black text fix) */
        #myScheduling .table.table-modern thead th { color: #fff !important; }

        /* Less aggressive row hover: lighter bg so black text stays readable */
        #myScheduling .table.table-modern tbody tr:hover {
            background: color-mix(in srgb, var(--card-bg, #f4f6fa15), #fff 22%) !important;
        }

        /* Cancel modal: ensure all text is white for readability */
        #CancelAppointmentsModal .modal-content,
        #CancelAppointmentsModal .modal-header,
        #CancelAppointmentsModal .modal-body,
        #CancelAppointmentsModal .modal-footer,
        #CancelAppointmentsModal .modal-title,
        #CancelAppointmentsModal .modal-body p,
        #CancelAppointmentsModal small,
        #CancelAppointmentsModal label {
            color: #fff !important;
        }

        /* Cancel modal: make the close "X" white */
        #CancelAppointmentsModal .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
            opacity: 1;
        }
        #CancelAppointmentsModal .btn-close:hover,
        #CancelAppointmentsModal .btn-close:focus {
            opacity: 1;
        }

        /* Confirm modal: ensure all text is white for readability */
        #ConfirmAppointmentsModal .modal-content,
        #ConfirmAppointmentsModal .modal-header,
        #ConfirmAppointmentsModal .modal-body,
        #ConfirmAppointmentsModal .modal-footer,
        #ConfirmAppointmentsModal .modal-title,
        #ConfirmAppointmentsModal .modal-body p,
        #ConfirmAppointmentsModal small,
        #ConfirmAppointmentsModal label {
            color: #fff !important;
        }
        #ConfirmAppointmentsModal .text-muted {
            color: #fff !important; /* "Confirme ou recuse o horário solicitado" */
            opacity: .9;            /* leve suavização */
        }
        #ConfirmAppointmentsModal .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
            opacity: 1;
        }
        #ConfirmAppointmentsModal .btn-close:hover,
        #ConfirmAppointmentsModal .btn-close:focus {
            opacity: 1;
        }
    </style>
}

<div id="myScheduling">
    <div class="container-xxl novo-padrao py-4 content-bg">
        <div class="page-hero rounded-4 p-4 p-md-5 mb-4 text-white">
            <div class="d-flex align-items-center">
                <div class="hero-icon me-3">🗓️</div>
                <div>
                    <h1 class="h3 mb-1">Seus Agendamentos</h1>
                    <p class="mb-0 opacity-75">Gerencie, confirme ou cancele seus horários</p>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-12" v-show="isAppointmentCancellationVisible">
                <div class="card panel-card hover-elevate mb-3">
                    <div class="card-header calendar-header text-center">
                        <h3 class="card-title flex-grow-1 mb-0 w-100">
                            <i class="fas fa-calendar-times"></i> Seus Agendamento
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="scheduling-container table-modern-wrapper w-100">
                            <table class="table table-hover table-modern align-middle">
                                <!-- Define 8 visible columns: # | Nome | Descrição | Tempo | Horário | Valor | Status | Ações -->
                                <colgroup>
                                    <col style="width:72px" />
                                    <col style="width:clamp(140px,18vw,220px)" />
                                    <col class="col-desc" />
                                    <col style="width:120px" />
                                    <col style="width:180px" />
                                    <col style="width:120px" />
                                    <col style="width:130px" />
                                    <col style="width:220px" />
                                </colgroup>
                                <caption class="table-caption">Total de agendamentos: {{ appointmentsList.length }}</caption>
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col" v-show="showNameBarber">Barbeiro</th>
                                        <th scope="col" v-show="!showNameBarber">Cliente</th>
                                        <th scope="col">Descrição</th>
                                        <th scope="col">Tempo</th>
                                        <th scope="col">Horário</th>
                                        <th scope="col">Valor</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(appoint, index) in appointmentsList" :key="appoint.idAppointments">
                                        <td class="cell-id" :title="appoint.idAppointments">{{ appoint.idAppointments }}</td>
                                        <td>{{ appoint.nameShowBarberOrCliente }}</td>
                                        <td class="cell-desc" :title="appoint.customer.description">{{ appoint.customer.description }}</td>
                                        <td class="cell-time">{{ convertMinutesToHours(appoint.customer.duration) }}</td>
                                        <td class="cell-datetime" :title="formatedDateTime(appoint.dateTime)">{{ formatedDateTime(appoint.dateTime) }}</td>
                                        <td class="cell-price" :title="'R$ ' + appoint.customer.price">R${{ appoint.customer.price }}</td>
                                        <td class="cell-status">
                                            <span class="status-badge" :class="appoint.statusAppointment === 'Confirmado' ? 'success' : 'danger'">
                                                {{ appoint.statusAppointment }}
                                            </span>
                                        </td>
                                        <td class="cell-actions">
                                            <button v-show="!showNameBarber && appoint.statusAppointment != 'Confirmado'"
                                                    class="btn btn-sm btn-success text-white"
                                                    :aria-label="'Confirmar agendamento ' + appoint.idAppointments"
                                                    v-on:click="OpenConfirmModal(appoint.idAppointments)">
                                                <i class="fas fa-check"></i> <span class="btn-label">Confirmar</span>
                                            </button>
                                            <button class="btn btn-sm btn-danger text-white"
                                                    :aria-label="'Cancelar agendamento ' + appoint.idAppointments"
                                                    v-on:click="GetIdAppointment(appoint.idAppointments)"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#CancelAppointmentsModal">
                                                <i class="fas fa-times"></i> <span class="btn-label">Cancelar</span>
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Empty state when there is no data -->
            <div class="col-12" v-show="!isAppointmentCancellationVisible">
                <div class="card panel-card hover-elevate mb-3">
                    <div class="card-body">
                        <div class="empty-state">
                            <div class="empty-state-icon">🗓️</div>
                            <h3 class="h5 mb-1">Nenhum agendamento encontrado</h3>
                            <p>Você ainda não possui agendamentos. Quando houver, eles aparecerão aqui.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Modal Cancel Appointments (destructive pattern) -->
    <div class="modal fade" id="CancelAppointmentsModal" tabindex="-1" aria-labelledby="CancelAppointmentsModalLabel" aria-hidden="true" ref="modalCancel">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-modern">
                <div class="modal-header">
                    <div class="d-flex align-items-center">
                        <span class="modal-icon danger">!</span>
                        <div>
                            <h1 class="modal-title fs-5 mb-0" id="CancelAppointmentsModalLabel">Cancelar agendamento</h1>
                            <small class="text-muted">Esta ação não pode ser desfeita</small>
                        </div>
                    </div>
                    <button type="button" class="btn-close" v-on:Click="ResetPossibleCancelAppointments()" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Deseja realmente cancelar este agendamento? O cliente será notificado e o horário ficará disponível novamente.
                </div>
                <div class="modal-footer modal-actions">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" v-on:Click="ResetPossibleCancelAppointments()">Voltar</button>
                    <button type="button" class="btn btn-danger" v-on:Click="CancelAppoindment()">
                        <i class="fas fa-trash-alt"></i> Cancelar agendamento
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Cancel Appointments -->

    <!-- Modal Confirm Appointments (barber confirm/decline) -->
    <div class="modal fade" id="ConfirmAppointmentsModal" tabindex="-1" aria-labelledby="ConfirmAppointmentsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-modern">
                <div class="modal-header">
                    <div class="d-flex align-items-center">
                        <!-- swapped to success intent -->
                        <span class="modal-icon success">✓</span>
                        <div>
                            <h1 class="modal-title fs-5 mb-0" id="ConfirmAppointmentsModalLabel">Confirmar agendamento</h1>
                            <small class="text-muted">Confirme ou recuse o horário solicitado</small>
                        </div>
                    </div>
                    <button type="button" class="btn-close" v-on:click="CloseConfirmModal()" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Deseja confirmar este agendamento? Caso não possa atender, você pode recusar e o cliente será notificado.
                </div>
                <div class="modal-footer modal-actions">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" v-on:click="CloseConfirmModal()">Voltar</button>
                    <!-- demote destructive to outlined -->
                    <button type="button" class="btn btn-outline-danger" v-on:click="RejectAppointment()">
                        <i class="fas fa-times-circle"></i> Recusar
                    </button>
                    <button type="button" class="btn btn-success" v-on:click="ConfirmAppointment()">
                        <i class="fas fa-check-circle"></i> Confirmar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Confirm Appointments -->

    <!-- Modal the user not logged in -->
    <div class="modal fade" id="UserNotLoggedModal" tabindex="-1" aria-labelledby="UserNotLoggedModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="UserNotLoggedModalLabel">Faça login para agendar um horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Para continuar com o agendamento, é necessário estar logado. Você será redirecionado para a tela de login e, após autenticação, retornará automaticamente para esta página.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                    <button type="button" class="btn btn-info" v-on:Click="RedirectLoginPage()">Fazer login</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user not logged in -->


</div>

<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<!-- Vue Toastification UMD -->
<script src="https://unpkg.com/vue-toastification@1.7.14/dist/index.umd.min.js"></script>
<script>
    // Toastification adapter: route Swal.fire to modern Vue toasts
    (function () {
        if (!window.VueToastification || window.__toast) return;

        const toast = window.VueToastification.createToastInterface({
            position: 'top-right',
            timeout: 3500,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            hideProgressBar: false
        });
        window.__toast = toast;

        const toToast = (opts) => {
            const type = (opts && opts.icon) || 'info';
            const message = [opts?.title, opts?.text].filter(Boolean).join(' — ') || ' ';
            switch (type) {
                case 'success': return toast.success(message);
                case 'error':   return toast.error(message);
                case 'warning': return toast.warning(message);
                case 'info':
                case 'question':
                default:        return toast.info(message);
            }
        };

        if (window.Swal) {
            const original = Swal.fire.bind(Swal);
            Swal.fire = (opts, ...rest) => {
                if (opts && typeof opts === 'object') {
                    toToast(opts);
                    return Promise.resolve(true);
                }
                return original(opts, ...rest);
            };
        } else {
            window.Swal = { fire: (opts) => { toToast(opts); return Promise.resolve(true); } };
        }
    })();

    var myScheduling = new Vue({
        el: '#myScheduling',
        data() {
            return {
                listaDeHorarios: [],
                maxButtons: 10 ,
                isAppointmentCancellationVisible: false,
                appointmentsList: [],
                possibleCancelAppointment: 0,
                userLogged: false,
                CustomersList:[],
                selectedService: 0,
                showNameBarber: false,
                showButtonConfirm: false,
                pendingConfirmAppointment: 0,
            }
        },
        methods: {
            formatTime(horario) {
                // Remove seconds from the time string
                return horario.slice(0, -3);
            },
            LoggedInClient(){
                   axios.post('/Session/IsUserLoggedIn')
                .then(response => {
                  this.userLogged = response.data;  
                  if(this.userLogged)
                        this.hasScheduling();
                  
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            hasScheduling(){
                      axios.get('/Scheduling/HasSchelulingClient',)
                .then(response => {
                    var result = JSON.parse(response.data)
                  if( result.appointiments.length > 0 ){
                       this.appointmentsList = result.appointiments;
                       this.showNameBarber = result.showNameBarber;
                       this.isAppointmentCancellationVisible = true;
                  }
                  else {
                       this.appointmentsList = result.appointiments;
                       this.showNameBarber = result.showNameBarber;
                       this.isAppointmentCancellationVisible = false;
                  }
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            GetIdAppointment(idAppointment)
            {
                this.possibleCancelAppointment = idAppointment;
            },
            ResetPossibleCancelAppointments(){
             this.possibleCancelAppointment = 0;
          },
            CancelAppoindment(){
              let idAppointment = this.possibleCancelAppointment;
                   axios.post('/Scheduling/CancelAppointment', idAppointment,
                   { headers : { 'Content-Type': 'application/json' }})
                .then(response => {

                  if(response.data){
                        this.hasScheduling();
                        this.hiddenModelAppointmentsCancel();
                    
                       Swal.fire({
                        title: 'Agendamento cancelado',
                        text: 'O agendamento foi cancelado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Cancelado com sucesso!'
                    });
                  }
                  else{
                      Swal.fire({
                        title: 'Falha ao cancelar o agendamento',
                        text: 'Durante the execução do cancelamento ocorreu um erro !',
                        icon: 'error',
                        confirmButtonText: 'Ok',
                        footer: 'Tente novamente !'
                    });
                  }

                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
          },
            RedirectLoginPage(){
                window.location.href = "/Login/Login";
            },
            OpenModalUserNotLoogedModal(){
               let modal = new bootstrap.Modal(document.getElementById("UserNotLoggedModal"));
                modal.show();
            },
            hiddenModelAppointmentsCancel(){
                const modalElement = document.getElementById('CancelAppointmentsModal');
                const modal = bootstrap.Modal.getInstance(modalElement);
                modal.hide();
            },
            formatedDateTime(date){
                    const dateTime = new Date(date);
                    return dateTime.toLocaleString('pt-BR');
            },
            ConfirmeAppointments(idAppointment){
                   axios.post('/Scheduling/ConfirmeAppointment', idAppointment,
                   { headers : { 'Content-Type': 'application/json' }})
                .then(response => {
                   
                       Swal.fire({
                        title: 'Agendamento Foi confirmado',
                        text: 'O agendamento foi confirmado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Confirmado com sucesso!'

                        })
                        this.hasScheduling();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            convertMinutesToHours(minutes) {
                if (typeof minutes !== "number" || minutes < 0) {
                    return "Entrada inválida. Insira um número positivo de minutos.";
                }

                const hours = Math.floor(minutes / 60);
                const remainingMinutes = minutes % 60;

                return `${hours} hora(s) e ${remainingMinutes} minuto(s)`;
            },
            OpenConfirmModal(idAppointment) {
                this.pendingConfirmAppointment = idAppointment;
                const el = document.getElementById("ConfirmAppointmentsModal");
                const modal = new bootstrap.Modal(el);
                modal.show();
            },
            CloseConfirmModal() {
                const el = document.getElementById("ConfirmAppointmentsModal");
                const modal = bootstrap.Modal.getInstance(el);
                if (modal) modal.hide();
                this.pendingConfirmAppointment = 0;
            },
            ConfirmAppointment() {
                const id = this.pendingConfirmAppointment;
                if (!id) return;
                // reuse existing confirm flow
                this.ConfirmeAppointments(id);
                this.CloseConfirmModal();
            },
            RejectAppointment() {
                const id = this.pendingConfirmAppointment;
                if (!id) return;
                axios.post('/Scheduling/CancelAppointment', id, { headers : { 'Content-Type': 'application/json' }})
                    .then(response => {
                        if (response.data) {
                            this.hasScheduling();
                            Swal.fire({
                                title: 'Agendamento recusado',
                                text: 'O agendamento foi recusado e o cliente será notificado.',
                                icon: 'success',
                                confirmButtonText: 'Ok'
                            });
                        } else {
                            Swal.fire({
                                title: 'Falha ao recusar o agendamento',
                                text: 'Ocorreu um erro ao recusar o agendamento.',
                                icon: 'error',
                                confirmButtonText: 'Ok'
                            });
                        }
                    })
                    .catch(() => {
                        Swal.fire({
                            title: 'Erro',
                            text: 'Não foi possível recusar o agendamento.',
                            icon: 'error',
                            confirmButtonText: 'Ok'
                        });
                    })
                    .finally(() => this.CloseConfirmModal());
            },
            OpenModalUserNotLoogedModal(){
               let modal = new bootstrap.Modal(document.getElementById("UserNotLoggedModal"));
                modal.show();
            },
            hiddenModelAppointmentsCancel(){
                const modalElement = document.getElementById('CancelAppointmentsModal');
                const modal = bootstrap.Modal.getInstance(modalElement);
                modal.hide();
            },
            formatedDateTime(date){
                    const dateTime = new Date(date);
                    return dateTime.toLocaleString('pt-BR');
            },
            ConfirmeAppointments(idAppointment){
                   axios.post('/Scheduling/ConfirmeAppointment', idAppointment,
                   { headers : { 'Content-Type': 'application/json' }})
                .then(response => {
                   
                       Swal.fire({
                        title: 'Agendamento Foi confirmado',
                        text: 'O agendamento foi confirmado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Confirmado com sucesso!'

                        })
                        this.hasScheduling();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            convertMinutesToHours(minutes) {
                if (typeof minutes !== "number" || minutes < 0) {
                    return "Entrada inválida. Insira um número positivo de minutos.";
                }

                const hours = Math.floor(minutes / 60);
                const remainingMinutes = minutes % 60;

                return `${hours} hora(s) e ${remainingMinutes} minuto(s)`;
            }
        },
        mounted() {
               this.LoggedInClient();
        }
    });
</script>