@using BarberShopSystem.Helpers
@{
    ViewData["Title"] = "Agendamentos";
}

<div id="scheduling" class="container">
    <div class="row">
        <div class="col-md-4 col-lg-5 order-md-last">
            <div class="card-body">
                <div class="row">
                    <h1>Barbeiros</h1>
                    <div>
                        <label>Selecione um barbeiro</label>
                        <select class="form-select" v-model="selectedBarber" v-on:Change="FormShowScheduling()">
                            <option value="0">Selecione um barbeiro</option>
                            <option v-for="barber in BarberList" :value="barber.barber.id">{{barber.nome}}</option>
                        </select>
                        <div class="alert alert-danger mt-2" v-show="alertSelectBarbereInvalidade" role="alert">
                            Selecione um Barbeiro !
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-5 order-md-last" v-show="showScheduling">
            <div class="card card-shadow-1 mb-1">
                <div class="card-header calendar-header">
                    <h3 class="card-title flex-grow-1 mb-0 w-100">Agendar Corte/ Serviço</h3>
                    <p class="w-100 m-0"></p>
                </div>
                <div class="card-body">
                    <div v-if="listaDeHorarios.length" class="scheduling-container">
                        <div v-for="(horario, index) in listaDeHorarios"
                             :key="horario.time"
                             v-if="index < maxButtons"
                             class="scheduling-button-wrapper">
                            <button v-on:click="selecionarHorario(horario.time)" v-show="horario.free">
                                {{ formatTime(horario.time) }}
                            </button>
                            <button  v-show="!horario.free" class="indisponivel" disabled>
                               {{ formatTime(horario.time) }}
                            </button>
                        </div>
                        <div class="row">
                            <h1>Serviços</h1>
                            <div>
                                <label>Selecione o serviço</label>
                                <select class="form-select" v-model="selectedService">
                                    <option :value="0">Selecione um serviço</option>
                                    <option v-for="customer in CustomersList" :value="customer.id">{{customer.name}} valor {{customer.price}}</option>
                                    
                                </select>
                                <div class="alert alert-danger mt-2" v-show="alertSelectCustomerInvalidade" role="alert">
                                    Selecione um serviço !
                                </div>
                            </div>
                        </div>   
                      
                        <div >
                            <button v-on:click="selecionarHorario(horario.time)">
                                Agendar
                            </button>
                        </div>
                    </div>
                    <div v-else>
                        <p>Não há horários disponíveis no momento.</p>
                    </div>
                </div>
               
            </div>
        </div>
    </div>

    <!-- Modal the user not logged in -->
    <div class="modal fade" id="UserNotLoggedModal" tabindex="-1" aria-labelledby="UserNotLoggedModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="UserNotLoggedModalLabel">Faça login para agendar um horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Para continuar com o agendamento, é necessário estar logado. Você será redirecionado para a tela de login e, após autenticação, retornará automaticamente para esta página.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                    <button type="button" class="btn btn-info" v-on:Click="RedirectLoginPage()">Fazer login</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user not logged in -->


</div>

<style>
    .scheduling-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .scheduling-button-wrapper {
        flex: 1 1 20%; /* Ajusta a porcentagem para controlar o número de botões por linha */
        display: flex;
        justify-content: center;
    }

    .scheduling-container button {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .scheduling-container button:hover {
            background-color: #0056b3;
        }

    .indisponivel {
        background-color: #dc3545; /* Cor de fundo para "Indisponível" */
        text-decoration: line-through; /* Riscar o texto */
    }

        .indisponivel:hover {
            background-color: #c82333; /* Cor ao passar o mouse em "Indisponível" */
        }

    .card-shadow-1 {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .calendar-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
</style>


<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var scheduling = new Vue({
        el: '#scheduling',
        data() {
            return {
                listaDeHorarios: [],
                maxButtons: 10 ,
                possibleCancelAppointment: 0,
                userLogged: false,
                CustomersList:[],
                BarberList: [],
                selectedService: 0,
                selectedBarber: 0,
                alertSelectCustomerInvalidade:false,
                alertSelectBarbereInvalidade:false,
                showScheduling: false,
            }
        },
        methods: {
            GetScheduling() { // passo 1 : Pega todos os horários 
                axios.get('/Scheduling/GetScheduling')
                .then(response => {
                    Swal.fire({
                        title: 'Horários carregados!',
                        text: 'Selecione um horário disponível.',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Verifique os dados preenchidos'
                    });
                    var result = JSON.parse(response.data);
                    this.listaDeHorarios = result.schedules; // passo 2 : Armazena os periodos de horários com seus valores de livres e agendados
                    this.BarberList = result.clients; // passo 2 : Armazena os periodos de horários com seus valores de livres e agendados
                    this.LoggedInClient();// passo 3 : Verifica se o usuário está logado
                    this.FormShowScheduling();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            selecionarHorario(horario) {
                this.resetAlertMeessage();
                if(this.userLogged){
                    let time = horario;

                    if(this.selectedService == 0){
                        this.alertSelectCustomerInvalidade = true;
                        if(this.selectedBarber == 0)
                            this.alertSelectBarbereInvalidade = true;

                        return;
                    }
                    if(this.selectedBarber == 0){
                        this.alertSelectBarbereInvalidade = true;
                        return;
                    }
                        

                        

                    const appointmentsDTO  = {
                        dateTime :time,
                        customerId: this.selectedService,
                        barberId: this.selectedBarber,
                    };


                    axios.post('/Scheduling/BookingATime', 
                    appointmentsDTO, {
                    headers: {
                        'Content-Type': 'application/json'}
                    })
                    .then(response => {
                        Swal.fire({
                            title: 'Horários carregados!',
                            text: 'Selecione um horário disponível.',
                            icon: 'success',
                            confirmButtonText: 'Ok',
                            footer: 'Verifique os dados preenchidos'
                        });
                        this.alertSelectCustomerInvalidade = false;
                        this.alertSelectBarbereInvalidade = false; 
                        this.GetScheduling();
                    })
                    .catch(error => {
                        console.error('Erro ao carregar horários:', error);
                    });
                }
                else{
                    this.OpenModalUserNotLoogedModal();
                }
                       
            },
            formatTime(horario) {
                // Remove seconds from the time string
                return horario.slice(0, -3);
            },
            LoggedInClient(){ // passo 4 : vai até o back-end verificar qual é a situação do usuário no momento se ele está logado ou não 
                   axios.post('/Session/IsUserLoggedIn')
                .then(response => {
                  this.userLogged = response.data;  // passo 5 : Armazena a situação atual, deixando true se ele estiver logado e false se estiver como um usuário anônimo
                  
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            RedirectLoginPage(){
                window.location.href = "/Login/Login";
            },
            OpenModalUserNotLoogedModal(){
               let modal = new bootstrap.Modal(document.getElementById("UserNotLoggedModal"));
                modal.show();
            },
            GetServices(){
                    axios.get('/Scheduling/GetCustomers')
                .then(response => {
                    this.CustomersList = response.data;
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            formatedDateTime(date){
                    const dateTime = new Date(date);
                    return dateTime.toLocaleString('pt-BR');
            },
            resetAlertMeessage(){
                this.alertSelectCustomerInvalidade =false;
                this.alertSelectBarbereInvalidade = false;
            },
            FormShowScheduling(){
                if(this.selectedBarber != "0"){
                    this.showScheduling = true;
                    this.schedulingFree();
                }
                else
                    this.showScheduling = false;
            },
            schedulingFree(){
                   this.listaDeHorarios.forEach(obj => {
                        if (obj.barbersIds.some(num => num === this.selectedBarber)) {
                            obj.free = false;
                        }
                        else {
                            if(obj.timeHasPassed == true){
                                obj.free= false ;
                            }
                            else{
                                obj.free = true;
                            }
                        }
                    });
            }

        },
        mounted() {
            this.GetServices();
            this.GetScheduling();  
        }
    });
</script>