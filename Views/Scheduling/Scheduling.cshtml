@using BarberShopSystem.Helpers
@{
    ViewData["Title"] = "Agendamentos";
}

<div id="scheduling" class="container">
    <div class="row">
        <div class="col-md-4 col-lg-5 order-md-last">
            <div class="card card-shadow-1 mb-1">
                <div class="card-header calendar-header">
                    <h3 class="card-title flex-grow-1 mb-0 w-100">Agendar Corte/ Serviço</h3>
                    <p class="w-100 m-0"></p>
                </div>
                <div class="card-body">
                    <div v-if="listaDeHorarios.length" class="scheduling-container">
                        <div v-for="(horario, index) in listaDeHorarios"
                             :key="horario.time"
                             v-if="index < maxButtons"
                             class="scheduling-button-wrapper">
                            <button v-on:click="selecionarHorario(horario.time)" v-show="horario.free">
                                {{ formatTime(horario.time) }}
                            </button>
                            <button  v-show="!horario.free" class="indisponivel" disabled>
                               {{ formatTime(horario.time) }}
                            </button>
                        </div>
                    </div>
                    <div v-else>
                        <p>Não há horários disponíveis no momento.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-5 order-md-last" v-show="isAppointmentCancellationVisible">
            <div class="card card-shadow-1 mb-1">
                <div class="card-header calendar-header">
                    <h3 class="card-title flex-grow-1 mb-0 w-100">Cancelar agendamento</h3>
                </div>
                <div class="card-body" >
                    <div class="scheduling-container">
                        <table class="table table-striped table-hover table-bordered">
                        <tr>
                            <th>Id</th>
                            <th>Descriçãoa</th>
                            <th>Horario</th>
                            <th>Valor</th>
                            <th></th>
                        </tr>
                            <tr v-for="(appoint, index) in appointmentsList" :accesskey="appoint.idAppointments">
                                <td>{{appoint.idAppointments}}</td>
                                <td>{{appoint.appointments}}</td>
                                <td>{{appoint.service}}</td>
                                <td>R${{appoint.val}}</td>
                                <td><button type="button" class="btn btn-danger text-white" v-on:Click="GetIdAppointment(appoint.idAppointments)" data-bs-toggle="modal" data-bs-target="#exampleModal">Cancelar Agendamentos </button></td>
                                
                        </tr>
                    </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" ref="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Deseja realmente Cancelar o agendamento?</h1>
                    <button type="button" class="btn-close" v-on:Click="ResetPossibleDeletedBarber()" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Deseja cancelar o Agendamento ? 
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" v-on:Click="ResetPossibleDeletedBarber()">Voltar</button>
                    <button type="button" class="btn btn-danger" v-on:Click="CancelAppoindment()">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .scheduling-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .scheduling-button-wrapper {
        flex: 1 1 20%; /* Ajusta a porcentagem para controlar o número de botões por linha */
        display: flex;
        justify-content: center;
    }

    .scheduling-container button {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .scheduling-container button:hover {
            background-color: #0056b3;
        }

    .indisponivel {
        background-color: #dc3545; /* Cor de fundo para "Indisponível" */
        text-decoration: line-through; /* Riscar o texto */
    }

        .indisponivel:hover {
            background-color: #c82333; /* Cor ao passar o mouse em "Indisponível" */
        }

    .card-shadow-1 {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .calendar-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
</style>


<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var scheduling = new Vue({
        el: '#scheduling',
        data() {
            return {
                listaDeHorarios: [],
                maxButtons: 10 ,
                isAppointmentCancellationVisible: false,
                appointmentsList: [],
                possibleCancelAppointment: 0,
            }
        },
        methods: {
            GetScheduling() {
                axios.post('/Scheduling/GetScheduling')
                .then(response => {
                    Swal.fire({
                        title: 'Horários carregados!',
                        text: 'Selecione um horário disponível.',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Verifique os dados preenchidos'
                    });
                    this.listaDeHorarios = response.data;
                    this.LoggedInClient();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            selecionarHorario(horario) {
                let time = horario;
                axios.post('/Scheduling/BookingATime', 
                time, {
                headers: {
                    'Content-Type': 'application/json'}
                })
                .then(response => {
                    Swal.fire({
                        title: 'Horários carregados!',
                        text: 'Selecione um horário disponível.',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Verifique os dados preenchidos'
                    });
                    this.listaDeHorarios = response.data;
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
                       
            },
            formatTime(horario) {
                // Remove seconds from the time string
                return horario.slice(0, -3);
            },
            LoggedInClient(){
                   axios.post('/Login/IsUserLoggedIn')
                .then(response => {
                  
                  if(response.data)
                        this.hasScheduling();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            hasScheduling(){


                      axios.post('/Scheduling/HasSchelulingClient',)
                .then(response => {

                  if( response.data.length > 0 ){
                       this.appointmentsList = response.data;
                       this.isAppointmentCancellationVisible = true;
                  }
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            GetIdAppointment(idAppointment)
            {
                this.possibleCancelAppointment = idAppointment;
            },
          ResetPossibleDeletedBarber(){
             this.possibleCancelAppointment = 0;
          },
          CancelAppoindment(){
              let idAppointment = this.possibleCancelAppointment;
                   axios.post('/Scheduling/CancelAppointment', idAppointment , { headers: {
                    'Content-Type': 'application/json'}
                })
                .then(response => {

                  if(response.data){
                       Swal.fire({
                        title: 'Agendamento cancelado',
                        text: 'O agendamento foi cancelado com sucesso!',
                        icon: 'success',
                        confirmButtonText: 'Ok',
                        footer: 'Verifique os dados preenchidos'
                    });
                  }
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
          }
        },
        mounted() {
            this.GetScheduling();
                
        }
    });
</script>