@using BarberShopSystem.Helpers
@{
    ViewData["Title"] = "Agendamentos";
}

@section Styles {
    <link href="~/css/Scheduling.css" rel="stylesheet" asp-append-version="true" />
}


<div id="scheduling" class="container">
    <div class="novo-padrao container py-4">
        <div v-for="(schedules, index) in schedules" :key="index" class="card p-4 shadow-sm mb-4">
            <div class="row">
                <!-- Informações do Barbeiro -->

                <div class="col-md-5">
                    <div class="card-body text-center">
                        <div>
                        <h3 class="card-title mb-2 text-primary">{{ schedules.user.nome }}</h3>
                            <img :src="schedules.user.barber.imgUrl" alt="Foto do Funcionário" class="rounded-circle employee-img img-fluid" />
                        </div>
                        <br>
                        <div class="alert alert-info">Implementar o feedback aqui</div>
                        <p class="text-muted"><strong>Especialidade: {{ schedules.user.barber.especialidade }}</strong></p>
                        <div class="barber-details mt-4 p-3 rounded">
                            <p><strong>Fumante:</strong> <label v-show="schedules.user.barber.smoker == 1">Sim</label> <label v-show="schedules.user.barber.smoker == 0">Não</label></p>
                            <p><strong>Estilo Musical:</strong> Rock</p>
                            <p><strong>Experiência:</strong> {{schedules.user.barber.experience}} anos</p>
                        </div>
                    </div>
                </div>

                <!-- Seleção de Serviços -->
                <div class="col-md-7">
                    <!-- Seleção de Serviço -->
                    <div class="mb-3">
                        <h5 class="text-secondary">Serviços</h5>

                        

                        <div >
                            <div v-for="service in CustomersList" :key="service.id" class="service-item d-flex justify-content-between align-items-center" style="display: flex !important;
                            justify-content: space-between !important;
                            align-items: center !important;
                            padding: 12px 0 !important;
                            border-bottom: 3px solid #ddd !important;">
                                <div class="service-details">
                                    <h5 class="service-name font-weight-bold">{{ service.name }}</h5>
                                    <span class="service-description text-muted" v-if="service.description">{{ service.description }}</span>
                                </div>

                                <div class="d-flex align-items-center">
                                    <div class="text-right mr-3">
                                        <span class="service-price font-weight-bold">R$ {{ service.price.toFixed(2) }}</span>
                                        <br>
                                        <span class="service-duration text-muted" style="font-size: 0.9rem;">{{ service.duration }} min</span>
                                    </div>
                                    <div style="padding:5px">
                                        <button type="button" class="btn btn-info reserve-button" style="color:white;" v-on:Click="modalReserveSchedules(schedules.weekDays,service.id,  schedules.user.id)">Reservar</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-danger mt-2" v-show="alertSelectCustomerInvalidade" role="alert">
                            Selecione um serviço!
                        </div>
                    </div>
                  
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user not logged in -->
    <div class="modal fade" id="UserNotLoggedModal" tabindex="-1" aria-labelledby="UserNotLoggedModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="UserNotLoggedModalLabel">Faça login para agendar um horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Para continuar com o agendamento, é necessário estar logado. Você será redirecionado para a tela de login e, após autenticação, retornará automaticamente para esta página.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                    <button type="button" class="btn btn-info" v-on:Click="RedirectLoginPage()">Fazer login</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user not logged in -->

    <!-- Modal the user barber -->
    <div class="modal fade" id="UserBarberLoggedModal" tabindex="-1" aria-labelledby="UserBarberLoggedModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="UserBarberLoggedModalLabel">Deseja oculpar esse horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Ao oculpar esse horário clientes não conseguiram agendar nenhum serviço nesse horário.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                    <button type="button" class="btn btn-info" v-on:Click="occupySchedule()">Oculpar horário</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal the user barber -->


    <!-- Modal Agendar um horários -->
    <div class="modal fade bd-example-modal-lg" id="ScheduleModal" tabindex="-1" aria-labelledby="ScheduleModalLabel" aria-hidden="true" ref="modalLogin">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="ScheduleModalLabel">Agende um horário</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="schedule-container mb-3">
                        <h5 class="text-secondary">Horários Disponíveis</h5>

                        <!-- Modo Desktop: Grade de horários -->
                        <div v-if="!isMobileView" class="schedule-grid">
                            <div class="week-day-header"></div>
                            <div v-for="weekDay in daysWeekModal" class="week-day-header">
                                <h5>{{ weekDay.dayString }}</h5>
                            </div>

                            <template v-for="(horario, index) in daysWeekModal[0]?.schedules">
                                <div class="time-slot">
                                    {{ formatTime(horario.time) }}
                                </div>

                                <div v-for="weekDay in daysWeekModal" class="schedule-cell">
                                    <button v-if="weekDay.schedules[index]"
                                            class="btn"
                                            :class="weekDay.schedules[index].free ? 'btn-success' : 'btn-secondary'"
                                            :disabled="!weekDay.schedules[index].free"
                                            @@click="selecionarHorario(weekDay.schedules[index].time, barberIdSelect, weekDay.dayDateTime)">
                                        {{ formatTime(weekDay.schedules[index].time) }}
                                    </button>
                                </div>
                            </template> 
                        </div>

                        <!-- Modo Mobile: Lista de dias com dropdown de horários -->
                        <div v-else class="mobile-schedule">
                            <div v-for="weekDay in daysWeekModal">
                                <button class="week-day-button" @@click="toggleDay(weekDay.dayString)">
                                    {{ weekDay.dayString }}
                                </button>
                                <div v-if="selectedDay === weekDay.dayString" class="mobile-schedule-list">
                                    <button v-for="horario in weekDay.schedules"
                                            :key="horario.time"
                                            class="btn"
                                            :class="horario.free ? 'btn-success' : 'btn-secondary'"
                                            :disabled="!horario.free"
                                            @@click="selecionarHorario(horario.time, barberIdSelect, weekDay.dayDateTime)">
                                        {{ formatTime(horario.time) }}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Voltar</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Agendar um horários -->

</div>

<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var scheduling = new Vue({
        el: '#scheduling',
        data() {
            return {
                schedules: [],
                maxButtons: 10 ,
                possibleCancelAppointment: 0,
                userLogged: false,
                CustomersList:[],
                BarberList: [],
                selectedService: 0,
                selectedBarber: 0,
                alertSelectCustomerInvalidade:false,
                alertSelectBarbereInvalidade:false,
                showScheduling: false,
                userLoggerIsBarber: false,
                modalBarberId: 0,
                timeOccupySchedule:0,
                isMobileView: false,
                selectedDay: null,
                daysWeekModal:[],
                barberIdSelect: 0,
                
            }
        },
        methods: {
            GetScheduling() { 
                axios.get('/Scheduling/GetScheduling')
                .then(response => {

                    var result = JSON.parse(response.data);
                    this.schedules = result.schedulesBarbers;
                    this.BarberList = result.barber; 
                    this.userLoggerIsBarber = result.isBarber;
                    this.LoggedInClient();
                    this.schedulingFree();
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            selecionarHorario(horario, barberId, dayDateTime) 
            {
                this.resetAlertMeessage();


                if(this.userLogged){
                    let time = horario;

                    if(this.selectedService == 0){
                        this.alertSelectCustomerInvalidade = true;

                    if(this.barberId == 0)
                        this.alertSelectBarbereInvalidade = true;

                        return;
                    }

                    let timeList = this.validateDurationService(time, barberId,dayDateTime); // Verificar se no dia tem o tempo necessário disponivel

                    if(timeList.length == 0)
                    {
                        Swal.fire({
                            title: 'Perído muito longo do serviço !',
                            text: 'O horário agendado não é suficiente para conseguir realizar esse serviço veja outro período.',
                            icon: 'error',
                            confirmButtonText: 'Ok',
                            footer: 'Tente outro período ou outro barbeiro'
                        });

                        return;
                    }
                        

                    if(this.userLoggerIsBarber){
                          this.OpenModalUserBarberLogged(time, barberId);
                        return;
                    }
                        
                   this.BookingATime(timeList, barberId,dayDateTime) // Passar aqui o dia para fazer o agendamento.
                }
                
                else{
                    this.closeModalreserveSchedules();
                    this.OpenModalUserNotLoogedModal();
                }
                       
            },
            BookingATime(time, barberId, dayDateTime){
                 const appointmentsDTO  = { // Implementar aqui também o dia que deve ser agendado 
                        dateTime :time,
                        customerId: this.selectedService,
                        barberId: barberId,
                        dayDateTime : dayDateTime
                    };


                    axios.post('/Scheduling/BookingATime',
                    appointmentsDTO, {
                    headers: {
                        'Content-Type': 'application/json'}
                    })
                    .then(response => {
                        if(!response.data){
                            
                              Swal.fire({
                                title: 'Horário já está agendado !',
                                text: 'Você tem um horário agendado nesse mesmo período.',
                                icon: 'error',
                                confirmButtonText: 'Ok',
                                footer: 'Verifique os horários que você já agendou'
                            });
                            
                            
                        }
                        else
                        {
                             if(this.userLoggerIsBarber)
                                this.closeModalUserBarberLogged();

                                this.closeModalreserveSchedules();

                        Swal.fire({
                            title: 'Horário Agendado!',
                            text: 'Seu horário foi agendado com sucesso.',
                            icon: 'success',
                            confirmButtonText: 'Ok',
                            footer: 'Aguarde a confirmação do barbeiro'
                        });
                        this.alertSelectCustomerInvalidade = false;
                        this.alertSelectBarbereInvalidade = false;
                        this.GetScheduling();
                        }
                       
                    })
                    .catch(error => {
                        console.error('Erro ao carregar horários:', error);
                    });
            },
            formatTime(horario) {
                // Remove seconds from the time string
                return horario.slice(0, -3);
            },
            LoggedInClient(){ 
                   axios.post('/Session/IsUserLoggedIn')
                .then(response => {
                  this.userLogged = response.data;  
                  
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            RedirectLoginPage(){
                window.location.href = "/Login/Login?sheduling=true";
            },  
            occupySchedule(){
                 this.BookingATime(this.timeOccupySchedule, this.modalBarberId)
            },
            OpenModalUserNotLoogedModal(){
               let modal = new bootstrap.Modal(document.getElementById("UserNotLoggedModal"));
                modal.show();
            },
            OpenModalUserBarberLogged(time, barberId){
                this.timeOccupySchedule = time;
                this.modalBarberId = barberId;
               let modal = new bootstrap.Modal(document.getElementById("UserBarberLoggedModal"));
                modal.show();
            },
            GetServices(){
                    axios.get('/Scheduling/GetCustomers')
                .then(response => {
                    this.CustomersList = response.data;
                })
                .catch(error => {
                    console.error('Erro ao carregar horários:', error);
                });
            },
            formatedDateTime(date){
                    const dateTime = new Date(date);
                    return dateTime.toLocaleString('pt-BR');
            },
            resetAlertMeessage(){
                this.alertSelectCustomerInvalidade =false;
                this.alertSelectBarbereInvalidade = false;
            },
            schedulingFree(){
                    this.schedules.forEach(obj => {
                        this.schedules.forEach(obj => {
                            obj.weekDays.forEach(weekDay => {
                            weekDay.schedules.forEach(item => {
                                if (item.barbersIds.length > 0) {
                                    const barberFound = item.barbersIds.some(barberId => barberId === obj.user.id);
                                    item.free = !barberFound;
                                }
                                else {
                                    item.free = !item.timeHasPassed;
                                }
                            });
                            });
                        });
                   });
            },
            closeModalUserBarberLogged(){
                let modalElement = document.getElementById("UserBarberLoggedModal");
                let modalInstance = bootstrap.Modal.getInstance(modalElement);
                if (modalInstance) {
                    modalInstance.hide();
                }
            },
            validateDurationService(time, barberId,dayDateTime){
                let durationService = 0;
                this.CustomersList.forEach(item => {
                    if(item.id == this.selectedService)
                        {
                           durationService = item.duration
                        }
                });
                return this.testeDuration(durationService,time, barberId,dayDateTime);
            },

        testeDuration(durationService, time, barberId, dayDateTime) {
        let listSchedule = [];
        let interval = 60; // Intervalo de agendamento (pode ser alterado)

        let qtdPeriodos = Math.ceil(durationService / interval);

        this.schedules.forEach(shedule => {
            shedule.weekDays.forEach(weekDay => {
                if (weekDay.dayDateTime !== dayDateTime) return; // Filtra apenas o dia correto

                if (shedule.user.barber.id !== barberId) return; // Filtra apenas o barbeiro correto

                weekDay.schedules.forEach((schedule, index, schedules) => {
                    if (schedule.time !== time) return; // Filtra apenas o horário correto

                    let horariosLivres = true;
                    let horariosSelecionados = [schedule.time];

                    let horarioAtual = new Date();
                    let [horas, minutos, segundos] = schedule.time.split(":").map(Number);
                    horarioAtual.setHours(horas, minutos, segundos);

                    for (let i = 1; i < qtdPeriodos; i++) {
                        horarioAtual.setMinutes(horarioAtual.getMinutes() + interval);
                        let proximoHorario = horarioAtual.toTimeString().split(" ")[0];

                        let proximoSchedule = schedules.find(s => s.time === proximoHorario);
                        if (!proximoSchedule || !proximoSchedule.free) {
                            horariosLivres = false;
                            break;
                        }

                        horariosSelecionados.push(proximoSchedule.time);
                    }

                    if (horariosLivres) {
                        listSchedule.push(...horariosSelecionados);
                    }
                });
            });
        });

        return listSchedule;
    },
            toggleSchedule(dayId) {
            const schedule = document.getElementById(dayId);
            if (schedule.style.display === "block") {
                schedule.style.display = "none";
            } else {
                schedule.style.display = "block";
            }
        },
      
        toggleDay(day) {
            this.selectedDay = this.selectedDay === day ? null : day;
        },
        checkScreenSize() {
            const width = window.innerWidth;

                if (width <= 768) {
                    this.isMobileView = true; // 📱 Modo mobile (lista de dias)
                } else if (width <= 1024) {
                    this.isTabletView = true; // 📱📟 Modo tablet (grade menor)
                    this.isMobileView = false;
                } else {
                    this.isMobileView = false; // 🖥️ Modo desktop normal
                    this.isTabletView = false;
                }
        },
        modalReserveSchedules(daysWeek, serviceId, barberId){
            this.daysWeekModal = daysWeek;
            this.selectedService = serviceId;
            this.barberIdSelect = barberId
             let modal = new bootstrap.Modal(document.getElementById("ScheduleModal"));
                modal.show();
        },
         closeModalreserveSchedules(){
                let modalElement = document.getElementById("ScheduleModal");
                let modalInstance = bootstrap.Modal.getInstance(modalElement);
                if (modalInstance) {
                    modalInstance.hide();
                }
            },
        },
        mounted() {
            this.checkScreenSize();
            window.addEventListener("resize", this.checkScreenSize);
            this.GetServices();
            this.GetScheduling();
        },
        beforeDestroy() {
            window.removeEventListener("resize", this.checkScreenSize);
        },
    });
</script>