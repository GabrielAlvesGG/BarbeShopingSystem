@{
    ViewData["Title"] = "Cadastro de Barbeiro";
}
<div id="registerBarber" v-cloak>
    <div class="overlay" id="loadingOverlay" style="display: none;">
        <div class="loader"></div>
    </div>
    <div class="container mt-5" v-show="showPropts.formsShow">
        <div class="row justify-content-center">
            <div class="col-md-8 p-4 shadow-sm rounded bg-white">
                <div class="col-12 text-center mb-4">
                    <h1>Cadastro de Barbeiros</h1>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="name" class="form-label">Nome:</label>
                        <input type="text" v-model="form.name" class="form-control" id="name" placeholder="Nome" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertNameInvalidade" role="alert">
                            É necessário preencher o nome do barbeiro!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="cpf" class="form-label">CPF/CNPJ:</label>
                        <input type="text" v-model="form.cpf" id="cpf-cnpj" class="form-control" placeholder="CPF/CNPJ" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertCpfInvalidade" role="alert">
                            O formato do CPF/CNPJ está incorreto!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="email" class="form-label">E-mail:</label>
                        <input type="email" v-model="form.email" id="email" class="form-control" placeholder="E-mail" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertEmailInvalidade" role="alert">
                            O e-mail está incorreto!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="password" class="form-label">Senha:</label>
                        <input type="password" v-model="form.password" id="password" class="form-control" placeholder="Senha" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertPasswordInvalidade" role="alert">
                            Está faltando preencher o campo senha!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="phone" class="form-label">Telefone:</label>
                        <input type="text" v-model="form.phone" id="phone" class="form-control" placeholder="Telefone" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertPhoneInvalidade" role="alert">
                            Está faltando preencher o campo telefone!
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="dateOfBirth" class="form-label">Data de Nascimento:</label>
                        <input type="date" v-model="form.dateOfBirth" id="dateOfBirth" class="form-control" />
                        <div class="alert alert-danger mt-2" v-show="messages.alertDateOfBirthInvalidade" role="alert">
                            Necessita de colocar a data de aniversário correta!
                        </div>
                    </div>
                    <div class="col-12 text-center">
                        <button type="button" class="btn btn-success btn-lg text-white" v-on:Click="registerBarber">Cadastrar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/Helper.js?v=1.0.0"></script>
<script>
   RegisterBarber = new Vue({
      el: '#registerBarber',
      data() {
        return {
            form:{
              id:0,
              name: '',
              email: '',
              password: '',
              cpf:'',
              dateOfBirth:'',
              phone:'',
            },
            messages: {
                  alertNameInvalidade: false,
                   alertEmailInvalidade: false,
                  alertPasswordInvalidade: false,
                  alertCpfInvalidade: false,
                  alertDateOfBirthInvalidade: false,
                  alertPhoneInvalidade :false,
            },
            showPropts:{
                formsShow: false,
            }
        };
      },
      methods: 
      {
        registerBarber() {
             this.showLoader();
             this.resetValidateForm();
            if(this.validateForm())
            {
                const barber = {
                  Id:this.form.id,
                  Name: this.form.name,
                  Email: this.form.email,
                  Password: this.form.password,
                  Cpf: this.form.cpf,
                  DateOfBirth: this.form.dateOfBirth,
                  Phone: this.form.phone
              };

               axios.post('/Barber/InsertBarber', barber, {
                  headers: {
                  'Content-Type': 'application/json'
                }})
                .then(response => {
                     this.hideLoader();
                     if(this.form.id ==0)
                       Swal.fire({
                              title: 'Sucesso!',
                              text: 'Barbeiro cadastrado com sucesso!',
                              icon: 'success',
                              confirmButtonText: 'Ok'
                          });
                          else
                            Swal.fire({
                               title: 'Sucesso!',
                                text: 'Barbeiro Editado com sucesso!',
                               icon: 'success',
                               confirmButtonText: 'Ok'
                           });
                })
                .catch(error => {
                  console.error('Erro ao cadastrar:', error);
                });
            
            }
        },
        editMode(idBarber){
               let idOldBarber= idBarber;
                axios.post('/Barber/EditBarber', idOldBarber, {
               headers: {
               'Content-Type': 'application/json'
             }})
             .then(response => {
                 this.form.id = response.data.id;
                 this.form.name= response.data.name;
                 this.form.email= response.data.email;
                 this.form.password= response.data.passWord;
                 this.form.cpf= response.data.cpf;
                 this.form.dateOfBirth= this.formatToPTBR(response.data.dateOfBirth);
                 this.form.phone= response.data.phone;
             })
             .catch(error => {
               console.error('Erro ao cadastrar:', error);
             }).finally(function (){
                 RegisterBarber.hideLoader();
             });
         },
        getQueryString(){
            let urlParams = new URLSearchParams(window.location.search);

            if(urlParams.has('id')){
                 let idBarber= Number(urlParams.get('id'));
                  this.editMode(idBarber);
            }
            else
                this.hideLoader();

            
         },
        formatToPTBR(date) {
            return date.split("T")[0];
        },
        validateForm() {
            const fields = {
                name: "alertNameInvalidade",
                email: "alertEmailInvalidade",
                password: "alertPasswordInvalidade",
                phone: "alertPhoneInvalidade",
                cpf: "alertCpfInvalidade",
                dateOfBirth: "alertDateOfBirthInvalidade"
            };

            let fullForm = true;

            for (const [field, alert] of Object.entries(fields)) {
                if (this.form[field] === "") {
                    this.messages[alert] = true;
                    fullForm = false;
                } else {
                    this.messages[alert] = false; 
                }
            }

            return fullForm;
        },

        resetValidateForm(){
             this.messages.alertNameInvalidade = false;
             this.messages.alertEmailInvalidade = false;
             this.messages.alertPasswordInvalidade = false;
             this.messages.alertPhoneInvalidade = false;
             this.messages.alertCpfInvalidade = false;
             this.messages.alertDateOfBirthInvalidade = false;
        },
        showLoader() {
            this.showPropts.formsShow = false;
            document.getElementById('loadingOverlay').style.display = 'flex';
        },
        hideLoader() {
            this.showPropts.formsShow = true;
            document.getElementById('loadingOverlay').style.display = 'none';
        },
      },
      mounted(){
           this.showLoader();
           this.getQueryString();
      }
    });
</script>