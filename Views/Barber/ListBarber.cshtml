@{
    ViewData["Title"] = "Cadastro de Barbeiros";
}
<div id="ListBarber" v-cloak>
    <div class="overlay" id="loadingOverlay" style="display: none;">
        <div class="loader"></div>
    </div>
    <div class="container" v-show="showPropts.listShow"> 
          <div class="row" >
              <h1>Lista de Barbeiros</h1>
          </div>
          <div class="row">
              <table class="table">
                <tr>
                    <td>Id</td>
                    <td>Nome</td>
                    <td>E-mail</td>
                    <td>Data de nascimento</td>
                    <td>cpf</td>
                    <td>phone</td>
                    <td></td>
                </tr>
                <tr v-for="barber in  paginatedList()" :key="barber.id">
                    <td>{{barber.id}}</td>
                    <td>{{barber.name}}</td>
                    <td>{{barber.email}}</td>
                    <td>{{barber.dateOfBirth}}</td>
                    <td>{{barber.cpf}}</td>
                    <td>{{barber.phone}}</td>
                    <td>
                        <button type="button" class="btn btn-info" style="color:white;" v-on:Click="EditBarber(barber.id)">Editar</button>
                        <button type="button" class="btn btn-danger" style="color:white;" v-on:Click="GetIdBarber(barber.id)" data-bs-toggle="modal" data-bs-target="#exampleModal">Excluír <i class="fa-solid fa-trash"> </i></button>
                    </td>
                </tr>
              </table>
            <v-app>
                <div clasas="text-center">
                    <v-pagination v-model="page"
                                  :length="4"
                                  rounded="0"></v-pagination>
                </div>
            </v-app>
          </div>
       </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" ref="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Deseja realmente excluir ?</h1>
                    <button type="button" class="btn-close" v-on:Click="ResetPossibleDeletedBarber()" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Deseja excluir esse Barbeiro ? 
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" v-on:Click="ResetPossibleDeletedBarber()">Voltar</button>
                    <button type="button" class="btn btn-danger" v-on:Click="DeleteBarber()">Excluir</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
<script src="https://cdn.jsdelivr.net/npm/vuetify@2.6.15/dist/vuetify.js"></script>
<script>
    
   listBarber = new Vue({
        el: '#ListBarber',
        vuetify: new Vuetify(),
        data() {
            return {
                barbers:[],
                possibleExcludedCustomer : 0,
                showPropts: {
                    listShow: false,
                },
                page: 1,
                itemsPerPage: 2,
             };
        },
        methods: {
        ListAllBarbers() {
            this.showLoader();
            axios.post('/Barber/ListAllBarbers')
            .then(response => {
                this.barbers = response.data;
                this.barbers.forEach(barber => {
                    barber.dateOfBirth = this.formatToPTBR(barber.dateOfBirth);
                });
                this.totalPages();
               
            })
            .catch(error => {
              console.error('Erro ao  cadastrar:', error);
            })
            .finally(function(){
                listBarber.hideLoader();
            });
        },
         EditBarber(idBarber){
                   window.location.href = "/Barber/RegisterBarber?id="+ idBarber;
        },
        DeleteBarber() {
             this.showLoader();
              const idBarber = this.possibleExcludedCustomer;
                axios.post('/Barber/DeleteBarber',idBarber,
              {
               headers: {
               'Content-Type': 'application/json'
             }})
             .then(response => {
                  this.hiddenModelDelete();
                  this.barbers = response.data;
                   this.hideLoader();
                  this.ListAllBarbers();
                     Swal.fire({
                               title: 'Sucesso!',
                               text: 'Barbeiro Excluido com sucesso!',
                               icon: 'success',
                               confirmButtonText: 'Ok'
                      });
             })
             .catch(error => {
               console.error('Erro ao  cadastrar:', error);
             });
         },
          GetIdBarber(idBarber)
         {
              this.possibleExcludedCustomer = idBarber;
         },
          ResetPossibleDeletedBarber(){
             this.possibleExcludedCustomer = 0;
          }, 
        formatToPTBR(date) {
            const [year, month, day] = date.split("T")[0].split("-");
            return `${day}/${month}/${year}`; 
        },
        hiddenModelDelete(){
            const modalElement = document.getElementById('exampleModal');
            const modal = bootstrap.Modal.getInstance(modalElement);
            modal.hide();
        },
         showLoader() {
               this.showPropts.listShow = false;
              document.getElementById('loadingOverlay').style.display = 'flex';
          },
          hideLoader() {
                this.showPropts.listShow = true;
              document.getElementById('loadingOverlay').style.display = 'none';
          },
             totalPages() {
              return Math.ceil(this.barbers.length / this.itemsPerPage);
         },
         paginatedList() {
                 const start = (this.page - 1) * this.itemsPerPage;
                 const end = start + this.itemsPerPage;
                  return this.barbers.slice(start, end);
         },
      },
       mounted() {
           this.showLoader();
           this.ListAllBarbers();
           const modalElement = this.$refs.modal;
           modalElement.addEventListener("hidden.bs.modal", this.ResetPossibleDeletedBarber());
        },
    });
</script>