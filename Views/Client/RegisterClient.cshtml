@{
    ViewData["Title"] = "Cadastro de Cliente";
}
<div id="registerClient">
    <div class="overlay" id="loadingOverlay" style="display: none;">
        <div class="loader"></div>
    </div>

    <div class="container" v-show="showPropts.formsShow">
          <div class="row">
              <div>
                  <h1>Cadastro de Clientes</h1>
              </div>
            <div class="col-4">
                   <label>Nome:</label>
                <input type="text" v-model="form.name" class="form-control" placeholder="Nome" />
                <div class="alert alert-danger" v-show="messages.alertNameInvalidade" role="alert">
                    É necessário preencher o campo nome!
                </div>
            </div>
            <div class="col-4">
                <label>Cpf:</label>
                <input type="text" v-model="form.cpf" id="cpf-cnpj" class="form-control" placeholder="Cpf" />
                <div class="alert alert-danger" v-show="messages.alertCpfInvalidade" role="alert">
                    O formato do cpf está incorreto !
                </div>
            </div>
            <div class="col-4">
                <label>E-mail:</label>
                <input type="text" v-model="form.email" class="form-control" placeholder="E-mail" />
                <div class="alert alert-danger" v-show="messages.alertEmailInvalidade" role="alert">
                    O e-mail está incorreto !
                </div>
            </div>
            <div class="col-4">
                <label>Senha:</label>
                <input type="password" v-model="form.password" class="form-control" placeholder="Senha" />
                <div class="alert alert-danger" v-show="messages.alertPasswordInvalidade" role="alert">
                    está faltando prencher o campo senha!
                </div>
            </div>
            <div class="col-4">
                <label>Telefone:</label>
                <input type="text" v-model="form.phone" id="phone" class="form-control" placeholder="Telefone" />
                <div class="alert alert-danger" v-show="messages.alertPhoneInvalidade" role="alert">
                    O campo telefone está incorreto! 
                </div>
            </div>
            <div class="col-4">
                <label>Data de Nacimento:</label>
                <input type="date" v-model="form.dateOfBirth" class="form-control" name="data_nascimento">
                <div class="alert alert-danger" v-show="messages.alertDateOfBirthInvalidade" role="alert">
                    Insira a data de nascimento corretamente ! 
                </div>
            </div>
            <input type="button" class="btn btn-success col-2" name="name" value="Cadastrar" v-on:Click="registerClient" />
          </div>
        
       </div>
</div>
<script src="~/lib/vue/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/Helper.js"></script>

<script>

   Registerclient = new Vue({
      el: '#registerClient',
      data() {
        return {
            form:{
              id:0,
              name: '',
              email: '',
               password: '',
              cpf:'',
              dateOfBirth:'',
              phone:''
            },
            messages: {
               alertNameInvalidade: false,
               alertEmailInvalidade: false,
               alertPasswordInvalidade: false,
               alertCpfInvalidade: false,
               alertDateOfBirthInvalidade: false,
               alertPhoneInvalidade :false,
            },
            showPropts:{
                formsShow: false,
            }
        };
      },
      methods: 
      {
        registerClient() {
            this.showLoader();
            this.resetValidateForm();

            if(this.validateForm()){
              const client = {
                  Id:this.form.id,
                  Name: this.form.name,
                  Email: this.form.email,
                  Password: this.form.password,
                  Cpf: this.form.cpf,
                  DateOfBirth: this.form.dateOfBirth,
                  Phone: this.form.phone
              };

               axios.post('/Client/InsertClient', client,{
                  headers: {
                  'Content-Type': 'application/json'
                }})
                .then(response => {
                    this.hideLoader();
                      if(this.form.id ==0)
                      Swal.fire({
                             title: 'Sucesso!',
                             text: 'Cliente cadastrado com sucesso!',
                             icon: 'success',
                             confirmButtonText: 'Ok'
                         });
                         else
                           Swal.fire({
                              title: 'Sucesso!',
                              text: 'Cliente Editado com sucesso!',
                              icon: 'success',
                              confirmButtonText: 'Ok'
                          });
                })
                .catch(error => {
                  console.error('Erro ao  cadastrar:', error);
                });
            }
        },
          editMode(idClient){
               let idOldClient = idClient;
                axios.post('/Client/EditClient', idOldClient,{
               headers: {
               'Content-Type': 'application/json'
             }})
             .then(response => {
                 this.form.id = response.data.id;
                 this.form.name= response.data.name;
                 this.form.email= response.data.email;
                 this.form.password= response.data.passWord;
                 this.form.cpf= response.data.cpf;
                 this.form.dateOfBirth= this.formatToPTBR(response.data.dateOfBirth);
                 this.form.phone= response.data.phone;
                  this.hideLoader();
             })
             .catch(error => {
               console.error('Erro ao  cadastrar:', error);
             });
         },
         getQueryString(){
            let urlParams = new URLSearchParams(window.location.search);

            if(urlParams.has('id')){
                 let idClient = Number(urlParams.get('id'));
                  this.editMode(idClient);
            }
         },
         formatToPTBR(date) {
            return date.split("T")[0];
        },
         validateForm() {
             const fields = {
                 name: "alertNameInvalidade",
                 email: "alertEmailInvalidade",
                 password: "alertPasswordInvalidade",
                 phone: "alertPhoneInvalidade",
                 cpf: "alertCpfInvalidade",
                 dateOfBirth: "alertDateOfBirthInvalidade"
             };

             let fullForm = true;

             for (const [field, alert] of Object.entries(fields)) {
                 if (this.form[field] === "") {
                     this.messages[alert] = true;
                     fullForm = false;
                 } else {
                     this.messages[alert] = false;
                 }
             }

             return fullForm;
         },
         showLoader() {
             this.showPropts.formsShow = false;
             document.getElementById('loadingOverlay').style.display = 'flex';
         },
         hideLoader() {
              this.showPropts.formsShow = true;
             document.getElementById('loadingOverlay').style.display = 'none';
         },
         resetValidateForm(){
              this.messages.alertNameInvalidade = false;
              this.messages.alertEmailInvalidade = false;
              this.messages.alertPasswordInvalidade = false;
              this.messages.alertPhoneInvalidade = false;
              this.messages.alertCpfInvalidade = false;
              this.messages.alertDateOfBirthInvalidade = false;
         }
      },
      mounted(){
          this.showLoader();
          this.getQueryString();
          this.hideLoader();
      }
    });
</script>